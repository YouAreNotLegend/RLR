
const fixed SLOP = 0.15;
const int normalAlpha = 50;
const int hoverAlpha = 150;
const int clickAlpha = 200;
const color clickColor = Color(0,112,170);

trigger gt_SlowDown;
trigger gt_DialogHover;
trigger gt_DialogClick;
trigger gt_DialogExit;
trigger gt_Setup;
trigger gt_TextCommands;
trigger gt_Hit;
trigger gt_SendChat;
trigger gt_DialogValueChange;
trigger gt_HorizontalBounce;
trigger gt_VerticalBounce;
trigger gt_killPlayer;
trigger gt_safe;
trigger gt_unsafe;
trigger gt_UpdateMousePos;
trigger gt_EndLevel;
trigger gt_ChaserSpawnTrigger;
trigger gt_ChaserKillTrigger;

// Note to self: Classic Normal: Set0, Classic Hard: Set1, Classic Insane: Set2

bool gt_HorizontalBounce_Func (bool testConds, bool runActions) {

    fixed angle = UnitGetFacing(EventUnit());

    if (testConds) {
        if (!((UnitGroupHasUnit(gv_greyDrones, EventUnit())) || (UnitGroupHasUnit(gv_purpleDrones, EventUnit()) && EventUnitRegion() == RegionFromName("VerticalEdge")))){
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    angle = 180 - angle;

    UnitSetFacing(EventUnit(), angle, 0);

    return true;
}

bool gt_VerticalBounce_Func (bool testConds, bool runActions) {

    fixed angle = UnitGetFacing(EventUnit());

    if (testConds) {
        if (!((UnitGroupHasUnit(gv_greyDrones, EventUnit())) || (UnitGroupHasUnit(gv_purpleDrones, EventUnit()) && EventUnitRegion() == RegionFromName("HorizontalEdge")))){
            return false;
        } 
    }

    if (!runActions) {
        return true;
    }

    angle = angle * -1; 

    UnitSetFacing(EventUnit(), angle, 0);

    return true;
}

bool gt_killPlayer_Func (bool testConds, bool runActions) {
    
    int i = 1;
    int j = 1;
    
    if (testConds) {
        if (EventPlayer() != 15) {
            return false;
        } 
    }

    if (!runActions) {
        return true;
    }
    for (; i<= PlayerGroupCount(gv_allPlayers); i+=1) {
        for (; j <= gv_droneSizeArray[0]; j+=1) {
            if ((EventUnitRegion() == gv_deathRegionArray[i][j] && UnitGroupHasUnit(gv_droneSizeGroup[j], EventUnit())) && !gv_safe[i]){
                RegionSetCenter(gv_rezZone[i], UnitGetPosition(gv_playerCharacter[i]));
                TextTagCreate(PlayerName(i), 20, UnitGetPosition(gv_playerCharacter[i]), 2, true, false, gv_allPlayers);
                libNtve_gf_CreateModelAtPoint("ZergAOECursorSplat", UnitGetPosition(gv_playerCharacter[i]));
                gv_rezModel[i] = ActorLastCreated();
                UnitIssueOrder(gv_playerCharacter[i], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                libNtve_gf_MakeUnitUncommandable(gv_playerCharacter[i], true);
                if (gv_autoClicking[i] == true) {
                    gv_autoClickAtLvlStart[i] = true;
                }
                gv_autoClicking[i] = false;
                gv_autoClickDisable = true; 
                gv_safe[i] = true;
                libNtve_gf_ShowHideUnit(gv_playerCharacter[i], false);
            }
        }
    }

    return true;
}

void setDeathRegion (fixed size, int j) {

    int i = 1;

    for (; i<=PlayerGroupCount(gv_allPlayers); i+=1) {
        gv_deathRegionArray[i][j] = RegionCircle(UnitGetPosition(gv_playerCharacter[i]), size / 2 + 0.25);
        RegionAttachToUnit(gv_deathRegionArray[i][j], gv_playerCharacter[i], Point(0,0));
        TriggerAddEventUnitRegion(gt_killPlayer, null, gv_deathRegionArray[i][j], true);
        
    }
}

int GetSizeArrayPosition (fixed size){

    int i=1;

    for (; i<=gv_droneSizeArray[0]; i+=1) {
        if (gv_droneSizeArray[i] == size) {
            return i;
        } else if (gv_droneSizeArray[i] == 0.0){
            gv_droneSizeArray[i] = size;
            gv_droneSizeArray[0] += 1;
            setDeathRegion(size, i);
            return i;
        }
    }
    return i;
}

bool gt_Setup_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }
    
    return true;
}

bool gt_safe_Func (bool testConds, bool runActions) {

    if (testConds) {
        if (EventPlayer() == 15){
           return false; 
        }
    }

    if (!runActions) {
        return true;
    }

    gv_safe[EventPlayer()] = true;
    return true;
}

bool gt_unsafe_Func (bool testConds, bool runActions) {

    if (testConds) {
        if (EventPlayer() == 15){
            return false; 
        }
    }

    if (!runActions) {
        return true;
    }

    gv_safe[EventPlayer()] = false;
    return true;
}

void GameStart () {
    // what to do when everyone has hit the ready button or the timer runs out

    int i = 1;
    bank playerbank;

    DialogControlSetVisible(gv_openingMenu, gv_allPlayers, false);
    DialogControlSetVisible(gv_chatBox.lv_mainPanel, gv_allPlayers, true);
    VisRevealerCreate(1, RegionEntireMap());

    if (gv_diffVotedFor[1] == 1) {
        gv_diff = "ClassicNormal";
        gv_currentSet = "Set0";
    } else if (gv_diffVotedFor[1] == 2) {
        gv_diff = "ClassicHard";
        gv_currentSet = "Set1";
    } else if (gv_diffVotedFor[1] == 3) {
        gv_diff = "ClassicInsane";
        gv_currentSet = "Set2";
    }
    for (; i <= PlayerGroupCount(gv_allPlayers); i+=1){
        UnitCreate(1, gv_characterSelected[i], c_unitCreateIgnorePlacement, i, PointFromId(1616826619), 0);
        gv_playerCharacter[i] = UnitLastCreated();
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, 10.0);
        CameraLockInput(i, false);
        playerbank = BankLoad("RUNLINGRUNIUU0m", i);
        BankValueSetFromInt(playerbank, gv_currentSet, "Games", BankValueGetAsInt(playerbank, gv_currentSet, "Games") + 1);
        if (!gv_solo) {
            BankValueSetFromInt(playerbank, gv_currentSet, "1", BankValueGetAsInt(playerbank, gv_currentSet, "1") + 1);
        } else {
            BankValueSetFromInt(playerbank, gv_currentSet, "S1", BankValueGetAsInt(playerbank, gv_currentSet, "S1") + 1);
        }
        
    }

    if (gv_diffVotedFor[1] == 1) {
        TriggerExecute(gt_ClassicNormal, true, false);
    } else if (gv_diffVotedFor[1] == 2){
        TriggerExecute(gt_ClassicHard, true, false);
    } else if (gv_diffVotedFor[1] == 3){
        TriggerExecute(gt_ClassicInsane, true, false);
    }
    gv_gameStarted = true;
    DialogControlSetPosition(gv_chatEditBox, PlayerGroupAll(), c_anchorBottom, 0, -500);
}

bool gt_DialogHover_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }
    
    if (EventDialogControl() == gv_gameTypeButtons[0].lv_dialog && !gv_gameTypeButtons[0].lv_isSelected) {
        // Game type one visual change
    } else if (EventDialogControl() == gv_gameTypeButtons[1].lv_dialog && !gv_gameTypeButtons[1].lv_isSelected) {
        // Game type two visual change
    } else if (EventDialogControl() == gv_gameTypeButtons[2].lv_dialog && !gv_gameTypeButtons[2].lv_isSelected) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[0].lv_dialog && !gv_gameDiffButtons[0].lv_isSelected) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[1].lv_dialog && !gv_gameDiffButtons[1].lv_isSelected) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[2].lv_dialog && !gv_gameDiffButtons[2].lv_isSelected) {
        // Game type three visual change
    }
    return true;
}

void StatsUpdate (structref<gs_LevelSet> lp_levelSet, string bankset, int player) {
    int losses;
    fixed winpc;
    int i = 1;
    fixed j = 100.0;
    fixed currentchance;

    BankLoad("RUNLINGRUNIUU0m", player);

    losses = BankValueGetAsInt(BankLastCreated(), bankset, "Games") - BankValueGetAsInt(BankLastCreated(), bankset, "Wins");
    if (losses == 0 && BankValueGetAsInt(BankLastCreated(), bankset, "Wins") == 0) {
        winpc = 0.0;
    } else if (losses == 0) {
        winpc = 100.0;
    } else {
        winpc = BankValueGetAsInt(BankLastCreated(), bankset, "Wins") / losses;
    }

    libNtve_gf_SetDialogItemText(gv_stats.lv_creator, StringToText(lp_levelSet.lv_creator), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_difficulty, IntToText(lp_levelSet.lv_difficulty), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_xPMult, StringToText(FixedToString(lp_levelSet.lv_xPMult, 1) + "x"), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_winningXP, IntToText(lp_levelSet.lv_winningXP), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_levels, IntToText(lp_levelSet.lv_levels), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_bosses, IntToText(lp_levelSet.lv_bosses), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_deaths, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "Deaths")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_saves, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "Saves")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_xP, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "XP")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_xPGame, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "XPGame")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_sTime, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "STime")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_tTime, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "TTime")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_games, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "Games")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_wins, IntToText(BankValueGetAsInt(BankLastCreated(), bankset, "Wins")), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_losses, IntToText(losses), PlayerGroupSingle(player));
    libNtve_gf_SetDialogItemText(gv_stats.lv_winPC, FixedToText(winpc, 1), PlayerGroupSingle(player));

    DialogControlRemoveAllDataPoints(gv_graph[1], PlayerGroupSingle(player));
    DialogControlRemoveAllDataPoints(gv_graph[2], PlayerGroupSingle(player));
    DialogControlRemoveAllDataPoints(gv_graph[3], PlayerGroupSingle(player));
    DialogControlRemoveAllDataPoints(gv_graph[4], PlayerGroupSingle(player));
    for (; i<=lp_levelSet.lv_levels; i+=1) {
        DialogControlAddDataPoint(gv_graph[1], gv_allPlayers, IntToFixed(i), BankValueGetAsInt(BankLastCreated(), bankset, "S" + IntToString(i)), 3);
    }
    i = 1;
    for (; i<=lp_levelSet.lv_levels; i+=1) {
        DialogControlAddDataPoint(gv_graph[3], gv_allPlayers, IntToFixed(i), BankValueGetAsInt(BankLastCreated(), bankset, IntToString(i)), 3);
    }
    i = 1;
    for (; i<=lp_levelSet.lv_levels; i+=1) {
        if (BankValueGetAsInt(BankLastCreated(), bankset, "S" + IntToString(i)) != 0) {
            currentchance = (IntToFixed(BankValueGetAsInt(BankLastCreated(), bankset, "S" + IntToString(i+1))) / IntToFixed(BankValueGetAsInt(BankLastCreated(), bankset, "S" + IntToString(i)))) * 100.0;
            DialogControlAddDataPoint(gv_graph[2], PlayerGroupSingle(player), IntToFixed(i), currentchance, 3);
        } else {
            currentchance = 0;
            DialogControlAddDataPoint(gv_graph[2], PlayerGroupSingle(player), IntToFixed(i), 0.0, 3);
        }
        DialogControlAddDataPoint(gv_graph[2], PlayerGroupSingle(player), IntToFixed(i), j * (currentchance / 100), 2);
        j = j * (currentchance / 100);
    }
    i = 1;
    j = 100;
    for (; i<=lp_levelSet.lv_levels; i+=1) {
        if (BankValueGetAsInt(BankLastCreated(), bankset, IntToString(i)) != 0) {
            currentchance = (IntToFixed(BankValueGetAsInt(BankLastCreated(), bankset, IntToString(i+1))) / IntToFixed(BankValueGetAsInt(BankLastCreated(), bankset, IntToString(i)))) * 100.0;
            DialogControlAddDataPoint(gv_graph[4], PlayerGroupSingle(player), IntToFixed(i), currentchance, 3);
        } else {
            currentchance = 0;
            DialogControlAddDataPoint(gv_graph[4], PlayerGroupSingle(player), IntToFixed(i), 0.0, 3);
        }
        DialogControlAddDataPoint(gv_graph[4], PlayerGroupSingle(player), IntToFixed(i), j * (currentchance / 100), 2);
        j = j * (currentchance / 100);
    }
}

void CharSelectClickAlpha (int avoid) {
    int i;

    for (; i <= 7; i+=1) {
        if (i != avoid) {
            DialogControlSetPropertyAsInt(gv_charSelectButtons[i].lv_normalImage, c_triggerControlPropertyAlpha, PlayerGroupSingle(EventPlayer()), normalAlpha);
        } else {
            DialogControlSetPropertyAsInt(gv_charSelectButtons[i].lv_normalImage, c_triggerControlPropertyAlpha, PlayerGroupSingle(EventPlayer()), hoverAlpha);
        }
    }
}

bool gt_DialogClick_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (EventDialogControl() == gv_charSelectButtons[0].lv_dialog && !gv_charSelectButtons[0].lv_isSelected) {
        // --- UNIT SELECT BUTTONS
        // I saw there were radio buttons after I did this, might switch over if they work, but this is fine for now
        // Zergling select visual change
        CharSelectClickAlpha(0);
        // Zergling select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Zergling";
    } else if (EventDialogControl() == gv_charSelectButtons[1].lv_dialog && !gv_charSelectButtons[1].lv_isSelected) {
        // Hydralisk select visual change
        CharSelectClickAlpha(1);
        // Hydralisk select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Hydralisk";
    } else if (EventDialogControl() == gv_charSelectButtons[2].lv_dialog && !gv_charSelectButtons[2].lv_isSelected) {
        // Baneling select visual change
        CharSelectClickAlpha(2);
        // Baneling select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Baneling";
    } else if (EventDialogControl() == gv_charSelectButtons[3].lv_dialog && !gv_charSelectButtons[3].lv_isSelected) {
        // Ultralisk select visual change
        CharSelectClickAlpha(3);
        // Ultralisk select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Ultralisk";
    } else if (EventDialogControl() == gv_charSelectButtons[4].lv_dialog && !gv_charSelectButtons[4].lv_isSelected) {
        // Lurker select visual change
        CharSelectClickAlpha(4);
        // Lurker select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Lurker";
    } else if (EventDialogControl() == gv_charSelectButtons[5].lv_dialog && !gv_charSelectButtons[5].lv_isSelected) {
        // Roach select visual change
        CharSelectClickAlpha(5);
        // Roach select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Roach";
    } else if (EventDialogControl() == gv_charSelectButtons[6].lv_dialog && !gv_charSelectButtons[6].lv_isSelected) {
        // Infested select visual change
        CharSelectClickAlpha(6);
        // Infested select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "InfestedTerran";
    } else if (EventDialogControl() == gv_charSelectButtons[7].lv_dialog && !gv_charSelectButtons[7].lv_isSelected) {
        // Drone select visual change
        CharSelectClickAlpha(7);
        // Drone select action
        gv_characterIsSelected[EventPlayer()] = true;
        gv_characterSelected[EventPlayer()] = "Drone";
    } else if (EventDialogControl() == gv_gameTypeButtons[0].lv_dialog && !gv_gameTypeButtons[0].lv_isSelected) {
        // --- GAME TYPE BUTTONS
        // Variable update
        gv_gameTypeButtons[0].lv_isSelected = true;
        gv_gameTypeButtons[1].lv_isSelected = false;
        gv_gameTypeButtons[2].lv_isSelected = false;
        // Show game diff options
        DialogControlSetVisible(gv_gameDiffFrame[0], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_gameDiffFrame[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_gameDiffFrame[2], PlayerGroupSingle(EventPlayer()), false);
        // Game type one action
    } else if (EventDialogControl() == gv_gameTypeButtons[1].lv_dialog && !gv_gameTypeButtons[1].lv_isSelected) {
        // Variable update
        gv_gameTypeButtons[0].lv_isSelected = false;
        gv_gameTypeButtons[1].lv_isSelected = true;
        gv_gameTypeButtons[2].lv_isSelected = false;
        // Show game diff options
        DialogControlSetVisible(gv_gameDiffFrame[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_gameDiffFrame[1], PlayerGroupSingle(EventPlayer()), true);
        DialogControlSetVisible(gv_gameDiffFrame[2], PlayerGroupSingle(EventPlayer()), false);
        // Game type two action
    } else if (EventDialogControl() == gv_gameTypeButtons[2].lv_dialog && !gv_gameTypeButtons[2].lv_isSelected) {
        // Variable update
        gv_gameTypeButtons[0].lv_isSelected = false;
        gv_gameTypeButtons[1].lv_isSelected = false;
        gv_gameTypeButtons[2].lv_isSelected = true;
        // Show game diff options
        DialogControlSetVisible(gv_gameDiffFrame[0], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_gameDiffFrame[1], PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_gameDiffFrame[2], PlayerGroupSingle(EventPlayer()), true);
        // Game type three action
    } else if (EventDialogControl() == gv_gameDiffButtons[0].lv_dialog && !gv_gameDiffButtons[0].lv_isSelected) {
        // --- GAME DIFF BUTTONS
        // Variable update
        gv_gameDiffButtons[0].lv_isSelected = true;
        gv_gameDiffButtons[1].lv_isSelected = false;
        gv_gameDiffButtons[2].lv_isSelected = false;
        // Game diff 1-1 action
        gv_diffVotedFor[EventPlayer()] = 1;
        // Stats Change
        StatsUpdate(gv_classicNormal, "Set0", EventPlayer());
    } else if (EventDialogControl() == gv_gameDiffButtons[1].lv_dialog && !gv_gameDiffButtons[1].lv_isSelected) {
        // Variable update
        gv_gameDiffButtons[0].lv_isSelected = false;
        gv_gameDiffButtons[1].lv_isSelected = true;
        gv_gameDiffButtons[2].lv_isSelected = false;
        // Game diff 1-2 action
        gv_diffVotedFor[EventPlayer()] = 2;
        // Stats Change
        StatsUpdate(gv_classicHard, "Set1", EventPlayer());
    } else if (EventDialogControl() == gv_gameDiffButtons[2].lv_dialog && !gv_gameDiffButtons[2].lv_isSelected) {
        // Variable update
        gv_gameDiffButtons[0].lv_isSelected = false;
        gv_gameDiffButtons[1].lv_isSelected = false;
        gv_gameDiffButtons[2].lv_isSelected = true;
        // Game diff Classic Hard action
        gv_diffVotedFor[EventPlayer()] = 3;
        // Stats Change
        StatsUpdate(gv_classicInsane, "Set2", EventPlayer());
    } else if (EventDialogControl() == gv_readyButton.lv_dialog && gv_characterIsSelected[EventPlayer()]) {
        // --- READY BUTTON
        if (gv_readyButton.lv_isSelected == true) {
            libNtve_gf_SetDialogItemText(gv_readyButton.lv_label, StringToText("Ready"), PlayerGroupSingle(EventPlayer()));
            gv_readyButton.lv_isSelected = false;
            gv_numOfPlayersReady -= 1;
        } else {
            libNtve_gf_SetDialogItemText(gv_readyButton.lv_label, StringToText("Unready"), PlayerGroupSingle(EventPlayer()));
            gv_readyButton.lv_isSelected = true;
            gv_numOfPlayersReady += 1;
            if (gv_numOfPlayersReady == PlayerGroupCount(gv_allPlayers)) {
                GameStart();
            }
        }
    } else if (EventDialogControl() == gv_chatBox.lv_closeButton) {
        // --- CHAT BUTTONS
        DialogControlSetVisible(gv_chatBox.lv_mainPanel, PlayerGroupSingle(EventPlayer()), false);
        DialogControlSetVisible(gv_nativeChat, PlayerGroupSingle(EventPlayer()), false);
    } else if (EventDialogControl() == gv_chatBox.lv_scrollBottomButton && false) {
        
        gv_scroll[EventPlayer()] = 0;
    } else if (EventDialogControl() == gv_chatBox.lv_scrollDownButton && false) {
        
        gv_scroll[EventPlayer()] -= gv_chatBox.lv_scrollStrength;
    } else if (EventDialogControl() == gv_chatBox.lv_scrollUpButton && gv_scroll[EventPlayer()] < 0 && false) {
        
        gv_scroll[EventPlayer()] += gv_chatBox.lv_scrollStrength;
    } else if (EventDialogControl() == gv_chatBox.lv_toggleVisibility){
        if (gv_visibility[EventPlayer()]){
            DialogControlSendAnimationEvent(gv_chatBox.lv_toggleVisibility, PlayerGroupSingle(EventPlayer()), "Invisible");
            gv_visibility[EventPlayer()] = false;
        } else {
            DialogControlSendAnimationEvent(gv_chatBox.lv_toggleVisibility, PlayerGroupSingle(EventPlayer()), "Visible");
            gv_visibility[EventPlayer()] = true;
        }
        
    } else if (EventDialogControl() == gv_chatBox.lv_toggleFade){
        if (gv_fade[EventPlayer()] == 0){
            DialogControlSendAnimationEvent(gv_chatBox.lv_toggleFade, PlayerGroupSingle(EventPlayer()), "T2");
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatLog, PlayerGroupSingle(EventPlayer()), "Fade");
            gv_fade[EventPlayer()] = 1;
        } else if (gv_fade[EventPlayer()] == 1){
            DialogControlSendAnimationEvent(gv_chatBox.lv_toggleFade, PlayerGroupSingle(EventPlayer()), "T3");
            DialogControlSendAnimationEvent(gv_nativeChat, PlayerGroupSingle(EventPlayer()), "ShowReal");
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatPanel, PlayerGroupSingle(EventPlayer()), "HideFake");
            gv_fade[EventPlayer()] = 2;
        } else if (gv_fade[EventPlayer()] == 2) {
            DialogControlSendAnimationEvent(gv_chatBox.lv_toggleFade, PlayerGroupSingle(EventPlayer()), "T");
            DialogControlSendAnimationEvent(gv_nativeChat, PlayerGroupSingle(EventPlayer()), "HideReal");
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatPanel, PlayerGroupSingle(EventPlayer()), "ShowFake");
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatLog, PlayerGroupSingle(EventPlayer()), "Unfade");
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatLog, PlayerGroupSingle(EventPlayer()), "CancelFade");
            
            gv_fade[EventPlayer()] = 0;
        }
        
    }
    return true;
}

bool gt_DialogExit_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (EventDialogControl() == gv_gameTypeButtons[0].lv_dialog && !gv_gameTypeButtons[0].lv_isSelected && false) {
        // Game type one visual change
    } else if (EventDialogControl() == gv_gameTypeButtons[1].lv_dialog && !gv_gameTypeButtons[1].lv_isSelected && false) {
        // Game type two visual change
    } else if (EventDialogControl() == gv_gameTypeButtons[2].lv_dialog && !gv_gameTypeButtons[2].lv_isSelected && false) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[0].lv_dialog && !gv_gameDiffButtons[0].lv_isSelected) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[1].lv_dialog && !gv_gameDiffButtons[1].lv_isSelected) {
        // Game type three visual change
    } else if (EventDialogControl() == gv_gameDiffButtons[2].lv_dialog && !gv_gameDiffButtons[2].lv_isSelected) {
        // Game type three visual change
    }

    return true;
}

void MenuTimer (int Time) {
    //the shame hidden behind an innocuous timer

    int i = Time % 60;
    int minutes = FixedToInt(Trunc(Time / 60));

    if (i >= 10) {
        libNtve_gf_SetDialogItemText(gv_timer, IntToText(minutes) + StringToText(":") + IntToText(i), gv_allPlayers);
    } else {
        libNtve_gf_SetDialogItemText(gv_timer, IntToText(minutes) + StringToText(":") + IntToText(0) + IntToText(i), gv_allPlayers);
    }
    for (; i > -2 && minutes > 0 || i > -1 && minutes == 0; i-=1) {
        Wait(1.0, c_timeReal);
        if (i == -1 && minutes > 0) {
            i += 60;
            minutes -= 1;
        }
        if (i >= 10) {
            libNtve_gf_SetDialogItemText(gv_timer, IntToText(minutes) + StringToText(":") + IntToText(i), gv_allPlayers);
        } else {
            libNtve_gf_SetDialogItemText(gv_timer, IntToText(minutes) + StringToText(":") + IntToText(0) + IntToText(i), gv_allPlayers);
        }
    }
    if (!gv_gameStarted){
       GameStart(); 
       gv_gameStarted = true;
    }
    
}   

bool gt_TextCommands_Func (bool testConds, bool runActions) {

    string message = EventChatMessage(false);
    int delete;

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    if (StringSub(message, 2, 5) == "Cam1"){
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(783392887), 0.0, -1, 10.0, true);
        
    } else if (StringSub(message, 2, 5) == "Cam2") {
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(2136353644), 0.0, -1, 10.0, true);
        
    } else if (StringSub(message, 2, 5) == "Cam3") {
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(1395169869), 0.0, -1, 10.0, true);
    } else if (StringSub(message, 2, 5) == "Cam4") {
        CameraApplyInfo(EventPlayer(), CameraInfoFromId(1623587201), 0.0, -1, 10.0, true);
    } else if (StringSub(message, 2, 4) == "Spd"){
        UnitSetPropertyFixed(gv_playerCharacter[EventPlayer()], c_unitPropMovementSpeed, StringToFixed(StringSub(message, 5, 6)));
    } else if (StringSub(message, 2, 5) == "Turn"){
        for (; delete < 10; delete += 1) {
            UnitSetFacing(gv_playerCharacter[1], RandomFixed(0.0, 360.0), 0);
            Wait(1.0, c_timeReal);
        }
    } else if (StringSub(message, 2, 2) == "T") {
        UnitSetPosition(gv_playerCharacter[EventPlayer()], PointFromName(StringSub(message, 3, 4)), false);
    }
    return true;
}

bool gt_SendChat_Func (bool testConds, bool runActions) {

    string message = EventChatMessage(false);
    int iter = gv_chatBox.lv_max -1;
    int iter2 = gv_chatBox.lv_max - 1;
    text AllMessages;
    int player;

    if (!testConds && StringSub(message, 1, 1) == "#") {
        return false;
    }

    if (!runActions) {
        return true;
    }

    while (iter > 0) {
        gv_chatBox.lv_chatMessage[iter] = gv_chatBox.lv_chatMessage[iter -1];
        iter -= 1;
    }
    gv_chatBox.lv_chatMessage[0] = StringToText(TextToString(TextWithColor(PlayerName(EventPlayer()), Color(0,100,80))) + ":" + message);
    
    while (iter2 >= 0) {
        AllMessages += StringToText(TextToString(gv_chatBox.lv_chatMessage[iter2]) + "<n/>");
        iter2 -= 1;
    }
    DialogControlSetPropertyAsText(gv_chatBox.lv_chatLog, c_triggerControlPropertyText, gv_allPlayers, AllMessages);

    for (; player < 15; player +=1) {
        if (gv_fade[player] == 1) {
            DialogControlSendAnimationEvent(gv_chatBox.lv_chatLog, PlayerGroupSingle(player), "Fade");
        }     
    }
    return true;

}

bool gt_Hit_Func (bool testConds, bool runActions) {

    if (!testConds || UnitGetOwner(EventUnit()) != 15) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    //if drones were to trigger something when they hit you, this'd be it

    return true;
}

bool gt_DialogValueChange_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    gv_camDistance[EventPlayer()] = libNtve_gf_DialogItemValue(gv_cam.lv_distanceSlider, EventPlayer());
    CameraSetValue(EventPlayer(), c_cameraValueDistance, gv_camDistance[EventPlayer()], 0, -1, 10.0);
    CameraInfoSetValue(CameraInfoFromId(1623587201), c_cameraValueDistance, gv_camDistance[EventPlayer()]);
    
    return true;
}

void spawnRed (int Num, fixed Speed, fixed Size, fixed Acceleration, string Colour, region Region, unitgroup Group, string UnitID, fixed Height, bool SpawnTrail, fixed TrailSize, fixed TrailFrequency, fixed TrailTime, string TrailColor) {
    point RandomPoint;
    int i = 0;
    fixed lp_size = Size * 100;
    int SizeGroup = GetSizeArrayPosition(Size);

    for (; i < Num; i+=1) {
        RandomPoint = RegionRandomPoint(Region);
        UnitCreate(1, UnitID, 0, 15, RegionRandomPoint(Region), 0);
        UnitSetScale(UnitLastCreated(), lp_size, lp_size, lp_size);
        CatalogFieldValueSet(c_gameCatalogUnit, UnitID, "Acceleration", 15, FixedToString(Acceleration, 2));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, Speed);
        UnitGroupAdd(Group, UnitLastCreated());
        UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
        UnitSetHeight(UnitLastCreated(), Height, 0);
        UnitGroupAdd(gv_dronesToMoveIfIdle, UnitLastCreated());
        UnitGroupAdd(gv_redDrones, UnitLastCreated());
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + Colour);
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RandomPoint), c_orderQueueReplace);
        if (SpawnTrail) {
            gf_TrailDronesSpawn(UnitLastCreated(), TrailSize, TrailFrequency, TrailTime, TrailColor);
        }
    }

}

void motherDrone (fixed lp_size, fixed lp_speed, string lp_movementType, int lp_pointVar, int lp_pointVar2, region lp_region, unitgroup lp_redGroup, fixed lp_height, string lp_color, fixed lp_pointMoveFrequency, int lp_thread) {

    fixed size = lp_size * 100;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    point initialposition = RegionRandomPoint(lp_region);

    if (lp_movementType == "Red") {
        UnitCreate(1, "RedDroneOne", 0, 15, initialposition, 0);
        UnitGroupAdd(gv_dronesToMoveIfIdle, UnitLastCreated());
        UnitGroupAdd(lp_redGroup, UnitLastCreated());
        UnitGroupAdd(gv_redDrones, UnitLastCreated());
        UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(lp_region)), c_orderQueueReplace);
    } else if (lp_movementType == "Grey" || lp_movementType == "Gray") {
        UnitCreate(1, "PointDefenseDrone", 0, 15, initialposition, RandomFixed(0, 360));
        UnitGroupAdd(gv_greyDrones, UnitLastCreated());
    } else if (lp_movementType == "Purple") {
        UnitCreate(1, "PointDefenseDrone", 0, 15, initialposition, RandomFixed(0, 360));
        UnitGroupAdd(gv_purpleDrones, UnitLastCreated());
    }
    UnitSetScale(UnitLastCreated(), size, size, size);
    UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
    UnitSetHeight(UnitLastCreated(), lp_height, 0);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
    gv_pointBank[lp_pointVar][lp_pointVar2] = Point(PointGetX(initialposition), PointGetY(initialposition));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
    gf_MovePointToUnit(UnitLastCreated(), gv_pointBank[lp_pointVar][lp_pointVar2], lp_pointMoveFrequency, lp_thread);
}

bool gt_UpdateMousePos_Func (bool testConds, bool runActions) {

    if (!testConds) {
        return false;
    }

    if (!runActions) {
        return true;
    }

    gv_mouseLocale[EventPlayer()] = Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld());
    TextTagCreate(StringToText("Here you are!"), 10, Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld()), 1.0, true, false, PlayerGroupAll());
    return true;
}

bool gt_EndLevel_Func (bool testConds, bool runActions) {

    int i = 1;

    if (testConds) {
        if (EventPlayer() == 15) {
            return false;
        }
    }

    if (!runActions) {
        return true;
    }

    gv_level += 1;
    for (; i <= PlayerGroupCount(gv_allPlayers); i+=1){
        if (i < 10) {
            UnitSetPosition(gv_playerCharacter[i], PointFromName("StartPoint0" + IntToString(i)), false);
        } else {
            UnitSetPosition(gv_playerCharacter[i], PointFromName("StartPoint" + IntToString(i)), false);
        }
        BankLoad("RUNLINGRUNIUU0m", i);
        if (!gv_solo) {
            BankValueSetFromInt(BankLastCreated(), gv_currentSet, IntToString(gv_level), BankValueGetAsInt(BankLastCreated(), gv_currentSet, IntToString(gv_level)) + 1);
        } else {
            BankValueSetFromInt(BankLastCreated(), gv_currentSet, "S" + IntToString(gv_level), BankValueGetAsInt(BankLastCreated(), gv_currentSet, "S" + IntToString(gv_level)) + 1);
        }
        BankSave(BankLastCreated());
        CameraApplyInfo(i, gv_camera[i], 1.0, 10, 3, true);
        UnitIssueOrder(gv_playerCharacter[i], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libNtve_gf_MakeUnitUncommandable(gv_playerCharacter[i], true);
        if (gv_autoClicking[i] == true) {
            gv_autoClickAtLvlStart[i] = true;
        }
        gv_autoClicking[i] = false;
        gv_autoClickDisable = true; 
    }

    // was going to just execute the trigger by name using gv_diff, but it was misbehaving so we get \/ this \/ abomination for now
    if (gv_diff == "ClassicNormal") {
        TriggerExecute(gt_ClassicNormal, true, false);
    } else if (gv_diff == "ClassicHard") {
        TriggerExecute(gt_ClassicHard, true, false);
    } else if (gv_diff == "ClassicInsane") {
        TriggerExecute(gt_ClassicInsane, true, false);
    }

    Wait(2, c_timeGame);
    i = 1;

    for (; i<=PlayerGroupCount(gv_allPlayers); i+=1){
        libNtve_gf_MakeUnitUncommandable(gv_playerCharacter[i], false);
        if (gv_autoClickAtLvlStart[i] == true) {
            gv_autoClickAtLvlStart[i] = false;
            gv_autoClicking[i] = true;
            gf_AutoClicker(i);
        }
    }
    gv_autoClickDisable = false; 
    
    return true;
}

bool gt_ChaserSpawnTrigger_Func (bool testConds, bool runActions) {

    if (testConds) {
        if (EventPlayer() == 15) {
            return false;
        }
        
    }

    if (!runActions) {
        return true;
    }

    if (gv_chase && (EventUnitRegion() == gv_chaserRegions[gv_whichChaser[EventPlayer()]] && gv_chaser[EventPlayer()] == null)) {
        gf_SpawnChaser(gv_chaserAttributes[EventPlayer()].lv_size, gv_chaserAttributes[EventPlayer()].lv_speed, gv_chaserPoints[gv_whichChaser[EventPlayer()]], EventPlayer());
    }

    return true;
}

bool gt_ChaserKillTrigger_Func (bool testConds, bool runActions) {

    if (testConds) {
        if (EventPlayer() == 15) {
            return false;
        }
        
    }

    if (!runActions) {
        return true;
    }

    if (EventUnitRegion() == gv_chaserDestroyRegions[gv_whichChaser[EventPlayer()]] && gv_chaser[EventPlayer()] != null) {
        UnitRemove(gv_chaser[EventPlayer()]);
        gv_chaser[EventPlayer()] = null;
        gv_whichChaser[EventPlayer()] += 1;
    }

    //fin level problem
    return true;
}

void customTriggerInit(){
    gt_DialogHover = TriggerCreate("gt_DialogHover_Func");
    gt_DialogClick = TriggerCreate("gt_DialogClick_Func");
    gt_DialogExit = TriggerCreate("gt_DialogExit_Func");
    gt_Setup = TriggerCreate("gt_Setup_Func");
    gt_TextCommands = TriggerCreate("gt_TextCommands_Func");
    gt_Hit = TriggerCreate("gt_Hit_Func");
    gt_SendChat = TriggerCreate("gt_SendChat_Func");
    gt_DialogValueChange = TriggerCreate("gt_DialogValueChange_Func");
    gt_HorizontalBounce = TriggerCreate("gt_HorizontalBounce_Func");
    gt_VerticalBounce = TriggerCreate("gt_VerticalBounce_Func");
    gt_killPlayer = TriggerCreate("gt_killPlayer_Func");
    gt_safe = TriggerCreate("gt_safe_Func");
    gt_unsafe = TriggerCreate("gt_unsafe_Func");
    gt_UpdateMousePos = TriggerCreate("gt_UpdateMousePos_Func");
    gt_EndLevel = TriggerCreate("gt_EndLevel_Func");
    gt_ChaserSpawnTrigger = TriggerCreate("gt_ChaserSpawnTrigger_Func");
    gt_ChaserKillTrigger = TriggerCreate("gt_ChaserKillTrigger_Func");
}

void main() {
    customTriggerInit();
    // CHASER EVENTS
    // ------- Chaser spawn
    TriggerAddEventUnitRegion(gt_ChaserSpawnTrigger, null, RegionFromName("Pad01"), true);
    TriggerAddEventUnitRegion(gt_ChaserSpawnTrigger, null, RegionFromName("Pad08"), true);
    TriggerAddEventUnitRegion(gt_ChaserSpawnTrigger, null, RegionFromName("Pad16"), true);
    // ------- Chaser kill
    TriggerAddEventUnitRegion(gt_ChaserKillTrigger, null, RegionFromName("Pad04"), true);
    TriggerAddEventUnitRegion(gt_ChaserKillTrigger, null, RegionFromName("Pad12"), true);
    TriggerAddEventUnitRegion(gt_ChaserKillTrigger, null, RegionFromName("Pad19"), true);
    // BOUNCE EVENTS
    TriggerAddEventUnitRegion(gt_HorizontalBounce, null, RegionFromName("VerticalBounceRegion"), true);
    TriggerAddEventUnitRegion(gt_VerticalBounce, null, RegionFromName("HorizontalBounceRegion"), true);
    TriggerAddEventUnitRegion(gt_HorizontalBounce, null, RegionFromName("VerticalEdge"), true);
    TriggerAddEventUnitRegion(gt_VerticalBounce, null, RegionFromName("HorizontalEdge"), true);
    TriggerAddEventUnitRegion(gt_HorizontalBounce, null, RegionFromName("VerticalBlah"), true);
    TriggerAddEventUnitRegion(gt_VerticalBounce, null, RegionFromName("HorizontalBlah"), true);
    // DIALOG EVENTS
    TriggerAddEventDialogControl(gt_DialogHover, 16, c_invalidDialogControlId, c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(gt_DialogClick, 16, c_invalidDialogControlId, c_triggerControlEventTypeClick);
    TriggerAddEventDialogControl(gt_DialogExit, 16, c_invalidDialogControlId, c_triggerControlEventTypeMouseExit);
    // OTHER 
    TriggerAddEventMapInit(gt_Setup);
    // ------- Chat commands
    TriggerAddEventChatMessage(gt_TextCommands, 16, "#", false);
    // ------- Hit Detection
    TriggerAddEventUnitRegion(gt_Hit, null, RegionFromName("Hitbox"), true);
    // ------- Custom Chat
    TriggerAddEventChatMessage(gt_SendChat, 16, "", false);
    // ------- Dialog value changed
    TriggerAddEventDialogControl(gt_DialogValueChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
    // ------- Update Mouse Position
    TriggerAddEventMouseMoved(gt_UpdateMousePos, 16);
    // ------- Safe/Danger zones
    TriggerAddEventUnitRegion(gt_safe, null, RegionFromName("SafeZones"), true);
    TriggerAddEventUnitRegion(gt_unsafe, null, RegionFromName("SafeZones"), false);
    // ------- Level end
    TriggerAddEventUnitRegion(gt_EndLevel, null, RegionFromName("End"), true);
}

