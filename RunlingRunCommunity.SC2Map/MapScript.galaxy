//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Just Another StarCraft II Map
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Stats {
    int lv_creator;
    int lv_difficulty;
    int lv_xPMult;
    int lv_winningXP;
    int lv_levels;
    int lv_bosses;
    int lv_achievements;
    int lv_deaths;
    int lv_saves;
    int lv_xP;
    int lv_xPGame;
    int lv_sTime;
    int lv_tTime;
    int lv_games;
    int lv_wins;
    int lv_losses;
    int lv_winPC;
};

struct gs_LevelSet {
    string lv_creator;
    int lv_difficulty;
    fixed lv_xPMult;
    int lv_winningXP;
    int lv_levels;
    int lv_bosses;
    int lv_achievements;
    string lv_set;
};

struct gs_Button {
    int lv_dialog;
    bool lv_isSelected;
    int lv_normalImage;
    int lv_hoverImage;
    int lv_label;
    gs_LevelSet lv_levelSet;
};

struct gs_Chat {
    int lv_mainPanel;
    int lv_chatPanel;
    int lv_scrollUpButton;
    int lv_scrollDownButton;
    int lv_scrollBottomButton;
    int lv_chatLog;
    int lv_max;
    int lv_scrollStrength;
    text[50] lv_chatMessage;
    int lv_closeButton;
    int lv_toggleVisibility;
    int lv_toggleFade;
};

struct gs_Cam {
    int lv_mainFrame;
    int lv_distanceSlider;
    bool[15] lv_isVisible;
};

struct gs_Chaser {
    fixed lv_speed;
    fixed lv_size;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int[5] gv_graph;
gs_Stats gv_stats;
gs_LevelSet gv_classicHard;
gs_LevelSet gv_classicNormal;
gs_LevelSet gv_classicInsane;
string gv_currentSet;
gs_Button[8] gv_charSelectButtons;
gs_Button[4] gv_gameTypeButtons;
gs_Button[10] gv_gameDiffButtons;
int[3] gv_gameDiffFrame;
gs_Button gv_readyButton;
int gv_openingMenu;
int gv_timer;
int gv_delete;
gs_Chat gv_chatBox;
int[15] gv_scroll;
bool[15] gv_visibility;
int[15] gv_fade;
int gv_nativeChat;
int gv_chatEditBox;
gs_Cam gv_cam;
unitgroup[11][51] gv_neoYellowDrones;
point[21][101] gv_pointBank;
unitgroup[5] gv_redGroup;
region[5] gv_redRegion;
int gv_thread;
bool gv_solo;
fixed gv_greyDroneSpeed;
playergroup gv_allPlayers;
int gv_level;
int gv_numOfPlayersReady;
bool[15] gv_characterIsSelected;
string[15] gv_characterSelected;
int[15] gv_diffVotedFor;
unit[15] gv_playerCharacter;
bool gv_gameStarted;
unitgroup[2] gv_greySizeUnitGroup;
fixed[31] gv_droneSizeArray;
unitgroup[31] gv_droneSizeGroup;
region[15][31] gv_deathRegionArray;
bool[15] gv_safe;
point[15] gv_mouseLocale;
camerainfo[15] gv_camera;
string gv_diff;
fixed[15] gv_camDistance;
bool[15] gv_autoClicking;
bool[15] gv_autoClickAtLvlStart;
bool gv_autoClickDisable;
region[15] gv_rezZone;
actor[15] gv_rezModel;
bool gv_chase;
int[15] gv_whichChaser;
region[11] gv_chaserRegions;
region[11] gv_chaserDestroyRegions;
point[11] gv_chaserPoints;
gs_Chaser[15] gv_chaserAttributes;
unitgroup gv_purpleDrones;
unitgroup gv_greyDrones;
unitgroup gv_redDrones;
string gv_drone;
unitgroup gv_zigZags;
unit[15] gv_chaser;
unitgroup gv_dronesToBeRemovedIfIdle;
unitgroup gv_dronesToMoveIfIdle;

void InitGlobals () {
    int init_i;
    int init_j;
    int init_i1;

    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_graph[init_i] = c_invalidDialogControlId;
    }
    gv_stats.lv_creator = c_invalidDialogControlId;
    gv_stats.lv_difficulty = c_invalidDialogControlId;
    gv_stats.lv_xPMult = c_invalidDialogControlId;
    gv_stats.lv_winningXP = c_invalidDialogControlId;
    gv_stats.lv_levels = c_invalidDialogControlId;
    gv_stats.lv_bosses = c_invalidDialogControlId;
    gv_stats.lv_achievements = c_invalidDialogControlId;
    gv_stats.lv_deaths = c_invalidDialogControlId;
    gv_stats.lv_saves = c_invalidDialogControlId;
    gv_stats.lv_xP = c_invalidDialogControlId;
    gv_stats.lv_xPGame = c_invalidDialogControlId;
    gv_stats.lv_sTime = c_invalidDialogControlId;
    gv_stats.lv_tTime = c_invalidDialogControlId;
    gv_stats.lv_games = c_invalidDialogControlId;
    gv_stats.lv_wins = c_invalidDialogControlId;
    gv_stats.lv_losses = c_invalidDialogControlId;
    gv_stats.lv_winPC = c_invalidDialogControlId;
    gv_classicHard.lv_creator = "";
    gv_classicHard.lv_set = "";
    gv_classicNormal.lv_creator = "";
    gv_classicNormal.lv_set = "";
    gv_classicInsane.lv_creator = "";
    gv_classicInsane.lv_set = "";
    gv_currentSet = "";
    for (init_i = 0; init_i <= 7; init_i += 1) {
        gv_charSelectButtons[init_i].lv_dialog = c_invalidDialogControlId;
        gv_charSelectButtons[init_i].lv_normalImage = c_invalidDialogControlId;
        gv_charSelectButtons[init_i].lv_hoverImage = c_invalidDialogControlId;
        gv_charSelectButtons[init_i].lv_label = c_invalidDialogControlId;
        gv_charSelectButtons[init_i].lv_levelSet.lv_creator = "";
        gv_charSelectButtons[init_i].lv_levelSet.lv_set = "";
    }
    for (init_i = 0; init_i <= 3; init_i += 1) {
        gv_gameTypeButtons[init_i].lv_dialog = c_invalidDialogControlId;
        gv_gameTypeButtons[init_i].lv_normalImage = c_invalidDialogControlId;
        gv_gameTypeButtons[init_i].lv_hoverImage = c_invalidDialogControlId;
        gv_gameTypeButtons[init_i].lv_label = c_invalidDialogControlId;
        gv_gameTypeButtons[init_i].lv_levelSet.lv_creator = "";
        gv_gameTypeButtons[init_i].lv_levelSet.lv_set = "";
    }
    for (init_i = 0; init_i <= 9; init_i += 1) {
        gv_gameDiffButtons[init_i].lv_dialog = c_invalidDialogControlId;
        gv_gameDiffButtons[init_i].lv_normalImage = c_invalidDialogControlId;
        gv_gameDiffButtons[init_i].lv_hoverImage = c_invalidDialogControlId;
        gv_gameDiffButtons[init_i].lv_label = c_invalidDialogControlId;
        gv_gameDiffButtons[init_i].lv_levelSet.lv_creator = "";
        gv_gameDiffButtons[init_i].lv_levelSet.lv_set = "";
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        gv_gameDiffFrame[init_i] = c_invalidDialogControlId;
    }
    gv_readyButton.lv_dialog = c_invalidDialogControlId;
    gv_readyButton.lv_normalImage = c_invalidDialogControlId;
    gv_readyButton.lv_hoverImage = c_invalidDialogControlId;
    gv_readyButton.lv_label = c_invalidDialogControlId;
    gv_readyButton.lv_levelSet.lv_creator = "";
    gv_readyButton.lv_levelSet.lv_set = "";
    gv_openingMenu = c_invalidDialogControlId;
    gv_timer = c_invalidDialogControlId;
    gv_delete = c_invalidDialogControlId;
    gv_chatBox.lv_mainPanel = c_invalidDialogControlId;
    gv_chatBox.lv_chatPanel = c_invalidDialogControlId;
    gv_chatBox.lv_scrollUpButton = c_invalidDialogControlId;
    gv_chatBox.lv_scrollDownButton = c_invalidDialogControlId;
    gv_chatBox.lv_scrollBottomButton = c_invalidDialogControlId;
    gv_chatBox.lv_chatLog = c_invalidDialogControlId;
    gv_chatBox.lv_max = 50;
    gv_chatBox.lv_scrollStrength = 20;
    for (init_i1 = 0; init_i1 <= 49; init_i1 += 1) {
        gv_chatBox.lv_chatMessage[init_i1] = StringToText("");
    }
    gv_chatBox.lv_closeButton = c_invalidDialogControlId;
    gv_chatBox.lv_toggleVisibility = c_invalidDialogControlId;
    gv_chatBox.lv_toggleFade = c_invalidDialogControlId;
    gv_nativeChat = c_invalidDialogControlId;
    gv_chatEditBox = c_invalidDialogControlId;
    gv_cam.lv_mainFrame = c_invalidDialogControlId;
    gv_cam.lv_distanceSlider = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 50; init_j += 1) {
            gv_neoYellowDrones[init_i][init_j] = UnitGroupEmpty();
        }
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        gv_redGroup[init_i] = UnitGroupEmpty();
    }
    gv_allPlayers = PlayerGroupEmpty();
    gv_level = 1;
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_characterSelected[init_i] = "";
    }
    for (init_i = 0; init_i <= 1; init_i += 1) {
        gv_greySizeUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        gv_droneSizeGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_safe[init_i] = true;
    }
    gv_diff = "";
    for (init_i = 0; init_i <= 14; init_i += 1) {
        gv_camDistance[init_i] = 45.0;
    }
    gv_purpleDrones = UnitGroupEmpty();
    gv_greyDrones = UnitGroupEmpty();
    gv_redDrones = UnitGroupEmpty();
    gv_drone = "PointDefenseDrone";
    gv_zigZags = UnitGroupEmpty();
    gv_dronesToBeRemovedIfIdle = UnitGroupEmpty();
    gv_dronesToMoveIfIdle = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_ResetChaser ();
void gf_ChaserIssueOrders (int lp_player, unit lp_chaser);
void gf_SpawnChaser (fixed lp_size, fixed lp_speed, point lp_startPoint, int lp_player);
fixed gf_GetAbsoluteValue (fixed lp_val);
void gf_ZigZag (int lp_num, fixed lp_speed, fixed lp_theta, fixed lp_delta, point lp_originPoint, fixed lp_size, fixed lp_delay, bool lp_intraRandom, fixed lp_arcLength, fixed lp_waveSpawnArcLength, int lp_thread, string lp_color, fixed lp_originOffset, fixed lp_height, fixed lp_frequency, bool lp_interRandom, fixed lp_time, fixed lp_zagAmount, fixed lp_zagTime);
void gf_ZagTime (unit lp_unit, fixed lp_zagTime, fixed lp_zagAmount);
void gf_TrailDronesSpawn (unit lp_unit, fixed lp_size, fixed lp_frequency, fixed lp_time, string lp_color);
void gf_DroneKill (unit lp_unit, fixed lp_time);
void gf_WheelOfDoom (int lp_arms, fixed lp_theta, int lp_lengthOfArms, fixed lp_rotationSpeed, point lp_rotationPoint, fixed lp_droneSpacing, fixed lp_initialSpacing, fixed lp_loopFrequency, fixed lp_speed, fixed lp_time, int lp_pointVar, int lp_pointVar2, fixed lp_size, fixed lp_height, string lp_color);
void gf_TraditionalYellow (fixed lp_frequency, int lp_num, fixed lp_size, point lp_originPoint, fixed lp_theta, fixed lp_delta, string lp_color, int lp_moveCommands, int lp_thread, fixed lp_distancePerCommand, fixed lp_rotationAmount, fixed lp_speed, fixed lp_finalDistance, fixed lp_angleChangeReduction, fixed lp_theImBadAtMathParameter, fixed lp_height, fixed lp_initialDelay, bool lp_interRandom, bool lp_intraRandom);
void gf_NeoYellow (int lp_num, point lp_originPoint, fixed lp_theta, fixed lp_delta, fixed lp_size, fixed lp_speed, bool lp_interRandom, bool lp_intraRandom, string lp_color, int lp_thread, fixed lp_angleDelta, fixed lp_time, fixed lp_distancePer, fixed lp_moveLoopWait, fixed lp_frequency, int lp_instance, fixed lp_height);
void gf_NeoYellowMove (fixed lp_speed, fixed lp_angleDelta, int lp_num, fixed lp_distancePer, fixed lp_moveLoopWait, int lp_instance, int lp_groupNum);
void gf_NeoYellowKill (fixed lp_time, int lp_instance, int lp_groupNum);
void gf_MovePointCircle (fixed lp_radius, fixed lp_theta, fixed lp_delta, fixed lp_frequencyOfMovement, point lp_centerPoint, int lp_thread, int lp_pointVar, int lp_pointVar2);
void gf_MovePointStraight (point lp_destinationPoint, fixed lp_distancePerLoop, fixed lp_frequencyOfLoop, int lp_thread, int lp_pointVar, int lp_pointVar2);
void gf_MovePointToUnit (unit lp_unitA, point lp_movedPoint, fixed lp_frequency, int lp_thread);
void gf_SpawnGrey (int lp__1, int lp__2, int lp__3, int lp__4, int lp__5, int lp__6, int lp__7, int lp__8, int lp__9, int lp__10, int lp__11, int lp__12, int lp__13, int lp__14, int lp__15, int lp__16, int lp__17, int lp__18, int lp__19, fixed lp_droneSpeed, fixed lp_size, string lp_color, bool lp_laneContained, bool lp_spawnTrail, fixed lp_trailSize, string lp_trailColor, fixed lp_trailFrequency, fixed lp_trailTime);
void gf_SpawnGreySingleLane (region lp_lane, int lp_numOfDrones, fixed lp_droneSpeed, fixed lp_size, string lp_color, bool lp_laneContained, bool lp_spawnTrail, fixed lp_trailSize, fixed lp_trailFrequency, fixed lp_trailTime, string lp_trailColor);
void gf_PointToDistanceBlue (fixed lp_frequency, fixed lp_delta, fixed lp_theta, fixed lp_speed, fixed lp_size, fixed lp_distance, fixed lp_arcLength, int lp_num, int lp_num2, fixed lp_delay, point lp_originPoint, fixed lp_originOffset, fixed lp_spacing, fixed lp_lineTheta, fixed lp_lineDelta, fixed lp_waveSpawnArcLength, bool lp_interRandom, bool lp_intraRandom, string lp_color, int lp_thread, fixed lp_height);
void gf_AutoClicker (int lp_player);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_ExampleLVL5Trigger;
trigger gt_ClassicNormal;
trigger gt_ClassicHard;
trigger gt_ClassicInsane;
trigger gt_Initialization;
trigger gt_KeyPressed;
trigger gt_GreyMovement;
trigger gt_RemoveIdleDrones;
trigger gt_RemoveRedSilver;
trigger gt_IdleMoveAgain;

//--------------------------------------------------------------------------------------------------
// Custom Script: IncludeMain()
//--------------------------------------------------------------------------------------------------
include "scripts/main"

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    main();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_ResetChaser () {
    // Automatic Variable Declarations
    // Implementation
    int i;
    for (;i<= PlayerGroupCount(gv_allPlayers); i+=1) {
        gv_whichChaser[i] = 0;
    }
}

trigger auto_gf_ChaserIssueOrders_Trigger = null;
int auto_gf_ChaserIssueOrders_lp_player;
unit auto_gf_ChaserIssueOrders_lp_chaser;

void gf_ChaserIssueOrders (int lp_player, unit lp_chaser) {
    auto_gf_ChaserIssueOrders_lp_player = lp_player;
    auto_gf_ChaserIssueOrders_lp_chaser = lp_chaser;

    if (auto_gf_ChaserIssueOrders_Trigger == null) {
        auto_gf_ChaserIssueOrders_Trigger = TriggerCreate("auto_gf_ChaserIssueOrders_TriggerFunc");
    }

    TriggerExecute(auto_gf_ChaserIssueOrders_Trigger, false, false);
}

bool auto_gf_ChaserIssueOrders_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_ChaserIssueOrders_lp_player;
    unit lp_chaser = auto_gf_ChaserIssueOrders_lp_chaser;

    // Automatic Variable Declarations
    // Implementation
    unit targetUnit = gv_playerCharacter[lp_player];
    while (gv_chaser[lp_player] != null) {
        Wait(0.0, c_timeGame);
        UnitIssueOrder(lp_chaser, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(targetUnit)), c_orderQueueReplace);
    }
    return true;
}

trigger auto_gf_SpawnChaser_Trigger = null;
fixed auto_gf_SpawnChaser_lp_size;
fixed auto_gf_SpawnChaser_lp_speed;
point auto_gf_SpawnChaser_lp_startPoint;
int auto_gf_SpawnChaser_lp_player;

void gf_SpawnChaser (fixed lp_size, fixed lp_speed, point lp_startPoint, int lp_player) {
    auto_gf_SpawnChaser_lp_size = lp_size;
    auto_gf_SpawnChaser_lp_speed = lp_speed;
    auto_gf_SpawnChaser_lp_startPoint = lp_startPoint;
    auto_gf_SpawnChaser_lp_player = lp_player;

    if (auto_gf_SpawnChaser_Trigger == null) {
        auto_gf_SpawnChaser_Trigger = TriggerCreate("auto_gf_SpawnChaser_TriggerFunc");
    }

    TriggerExecute(auto_gf_SpawnChaser_Trigger, false, false);
}

bool auto_gf_SpawnChaser_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_size = auto_gf_SpawnChaser_lp_size;
    fixed lp_speed = auto_gf_SpawnChaser_lp_speed;
    point lp_startPoint = auto_gf_SpawnChaser_lp_startPoint;
    int lp_player = auto_gf_SpawnChaser_lp_player;

    // Automatic Variable Declarations
    // Implementation
    fixed size = lp_size * 100;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    UnitCreate(1, "PointDefenseDrone", c_unitCreateIgnorePlacement, 15, lp_startPoint, 0);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
    UnitSetScale(UnitLastCreated(), size, size, size);
    UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
    gv_chaser[lp_player] = UnitLastCreated();
    gf_ChaserIssueOrders(lp_player, UnitLastCreated());
    return true;
}

fixed gf_GetAbsoluteValue (fixed lp_val) {
    // Automatic Variable Declarations
    // Implementation
    if (lp_val >= 0) {
        return lp_val;
    } else {
        return lp_val * -1;
    }
}

trigger auto_gf_ZigZag_Trigger = null;
int auto_gf_ZigZag_lp_num;
fixed auto_gf_ZigZag_lp_speed;
fixed auto_gf_ZigZag_lp_theta;
fixed auto_gf_ZigZag_lp_delta;
point auto_gf_ZigZag_lp_originPoint;
fixed auto_gf_ZigZag_lp_size;
fixed auto_gf_ZigZag_lp_delay;
bool auto_gf_ZigZag_lp_intraRandom;
fixed auto_gf_ZigZag_lp_arcLength;
fixed auto_gf_ZigZag_lp_waveSpawnArcLength;
int auto_gf_ZigZag_lp_thread;
string auto_gf_ZigZag_lp_color;
fixed auto_gf_ZigZag_lp_originOffset;
fixed auto_gf_ZigZag_lp_height;
fixed auto_gf_ZigZag_lp_frequency;
bool auto_gf_ZigZag_lp_interRandom;
fixed auto_gf_ZigZag_lp_time;
fixed auto_gf_ZigZag_lp_zagAmount;
fixed auto_gf_ZigZag_lp_zagTime;

void gf_ZigZag (int lp_num, fixed lp_speed, fixed lp_theta, fixed lp_delta, point lp_originPoint, fixed lp_size, fixed lp_delay, bool lp_intraRandom, fixed lp_arcLength, fixed lp_waveSpawnArcLength, int lp_thread, string lp_color, fixed lp_originOffset, fixed lp_height, fixed lp_frequency, bool lp_interRandom, fixed lp_time, fixed lp_zagAmount, fixed lp_zagTime) {
    auto_gf_ZigZag_lp_num = lp_num;
    auto_gf_ZigZag_lp_speed = lp_speed;
    auto_gf_ZigZag_lp_theta = lp_theta;
    auto_gf_ZigZag_lp_delta = lp_delta;
    auto_gf_ZigZag_lp_originPoint = lp_originPoint;
    auto_gf_ZigZag_lp_size = lp_size;
    auto_gf_ZigZag_lp_delay = lp_delay;
    auto_gf_ZigZag_lp_intraRandom = lp_intraRandom;
    auto_gf_ZigZag_lp_arcLength = lp_arcLength;
    auto_gf_ZigZag_lp_waveSpawnArcLength = lp_waveSpawnArcLength;
    auto_gf_ZigZag_lp_thread = lp_thread;
    auto_gf_ZigZag_lp_color = lp_color;
    auto_gf_ZigZag_lp_originOffset = lp_originOffset;
    auto_gf_ZigZag_lp_height = lp_height;
    auto_gf_ZigZag_lp_frequency = lp_frequency;
    auto_gf_ZigZag_lp_interRandom = lp_interRandom;
    auto_gf_ZigZag_lp_time = lp_time;
    auto_gf_ZigZag_lp_zagAmount = lp_zagAmount;
    auto_gf_ZigZag_lp_zagTime = lp_zagTime;

    if (auto_gf_ZigZag_Trigger == null) {
        auto_gf_ZigZag_Trigger = TriggerCreate("auto_gf_ZigZag_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZigZag_Trigger, false, false);
}

bool auto_gf_ZigZag_TriggerFunc (bool testConds, bool runActions) {
    int lp_num = auto_gf_ZigZag_lp_num;
    fixed lp_speed = auto_gf_ZigZag_lp_speed;
    fixed lp_theta = auto_gf_ZigZag_lp_theta;
    fixed lp_delta = auto_gf_ZigZag_lp_delta;
    point lp_originPoint = auto_gf_ZigZag_lp_originPoint;
    fixed lp_size = auto_gf_ZigZag_lp_size;
    fixed lp_delay = auto_gf_ZigZag_lp_delay;
    bool lp_intraRandom = auto_gf_ZigZag_lp_intraRandom;
    fixed lp_arcLength = auto_gf_ZigZag_lp_arcLength;
    fixed lp_waveSpawnArcLength = auto_gf_ZigZag_lp_waveSpawnArcLength;
    int lp_thread = auto_gf_ZigZag_lp_thread;
    string lp_color = auto_gf_ZigZag_lp_color;
    fixed lp_originOffset = auto_gf_ZigZag_lp_originOffset;
    fixed lp_height = auto_gf_ZigZag_lp_height;
    fixed lp_frequency = auto_gf_ZigZag_lp_frequency;
    bool lp_interRandom = auto_gf_ZigZag_lp_interRandom;
    fixed lp_time = auto_gf_ZigZag_lp_time;
    fixed lp_zagAmount = auto_gf_ZigZag_lp_zagAmount;
    fixed lp_zagTime = auto_gf_ZigZag_lp_zagTime;

    // Automatic Variable Declarations
    // Implementation
    fixed AngleDifferenceBetweenDrones;
    fixed Angle;
    fixed Delta = lp_delta;
    fixed Size = lp_size * 100;
    fixed ArcLength = 360;
    int i;
    int SizeGroup;
    Wait(lp_delay, c_timeGame);
    SizeGroup = GetSizeArrayPosition(lp_size);
    if (lp_intraRandom) {
        if (lp_arcLength > 0) {
            ArcLength = lp_arcLength;
        }
    } else if (lp_waveSpawnArcLength > 0){
        AngleDifferenceBetweenDrones = lp_waveSpawnArcLength/lp_num;
    } else {
        AngleDifferenceBetweenDrones = 360/lp_num;
    }
    Angle = lp_theta;
    while (gv_thread == lp_thread) {
        i = 0;
        for (; i < lp_num; i+=1) {
            UnitCreate(1, gv_drone, 0, 15, PointWithOffsetPolar(lp_originPoint, lp_originOffset, Angle + AngleDifferenceBetweenDrones * i), Angle + AngleDifferenceBetweenDrones * i);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
            UnitSetScale(UnitLastCreated(), Size, Size, Size);
            UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
            UnitGroupAdd(gv_zigZags, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
            UnitSetHeight(UnitLastCreated(), lp_height, 0);
            if (lp_intraRandom) {
                Angle = RandomFixed(lp_theta, ArcLength + lp_theta);
            }
            gf_DroneKill(UnitLastCreated(), lp_time);
            gf_ZagTime(UnitLastCreated(), lp_zagTime, lp_zagAmount);
        }
        Wait(1/lp_frequency, c_timeGame);
        
        if (!lp_interRandom){
            Angle += Delta;
        } else {
            Angle = RandomFixed(lp_theta, ArcLength + lp_theta);
        }
        if ((gf_GetAbsoluteValue(Angle) >= lp_arcLength + lp_theta || Angle <= lp_theta) && lp_arcLength != 0){
            Delta *= -1;
        }
    }
    return true;
}

trigger auto_gf_ZagTime_Trigger = null;
unit auto_gf_ZagTime_lp_unit;
fixed auto_gf_ZagTime_lp_zagTime;
fixed auto_gf_ZagTime_lp_zagAmount;

void gf_ZagTime (unit lp_unit, fixed lp_zagTime, fixed lp_zagAmount) {
    auto_gf_ZagTime_lp_unit = lp_unit;
    auto_gf_ZagTime_lp_zagTime = lp_zagTime;
    auto_gf_ZagTime_lp_zagAmount = lp_zagAmount;

    if (auto_gf_ZagTime_Trigger == null) {
        auto_gf_ZagTime_Trigger = TriggerCreate("auto_gf_ZagTime_TriggerFunc");
    }

    TriggerExecute(auto_gf_ZagTime_Trigger, false, false);
}

bool auto_gf_ZagTime_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_ZagTime_lp_unit;
    fixed lp_zagTime = auto_gf_ZagTime_lp_zagTime;
    fixed lp_zagAmount = auto_gf_ZagTime_lp_zagAmount;

    // Automatic Variable Declarations
    // Implementation
    int i = 1;
    while (UnitIsAlive(lp_unit)) {
        Wait(lp_zagTime, c_timeGame);
        UnitSetFacing(lp_unit, UnitGetFacing(lp_unit) + lp_zagAmount * i, 0);
        i = i * -1;
    }
    return true;
}

trigger auto_gf_TrailDronesSpawn_Trigger = null;
unit auto_gf_TrailDronesSpawn_lp_unit;
fixed auto_gf_TrailDronesSpawn_lp_size;
fixed auto_gf_TrailDronesSpawn_lp_frequency;
fixed auto_gf_TrailDronesSpawn_lp_time;
string auto_gf_TrailDronesSpawn_lp_color;

void gf_TrailDronesSpawn (unit lp_unit, fixed lp_size, fixed lp_frequency, fixed lp_time, string lp_color) {
    auto_gf_TrailDronesSpawn_lp_unit = lp_unit;
    auto_gf_TrailDronesSpawn_lp_size = lp_size;
    auto_gf_TrailDronesSpawn_lp_frequency = lp_frequency;
    auto_gf_TrailDronesSpawn_lp_time = lp_time;
    auto_gf_TrailDronesSpawn_lp_color = lp_color;

    if (auto_gf_TrailDronesSpawn_Trigger == null) {
        auto_gf_TrailDronesSpawn_Trigger = TriggerCreate("auto_gf_TrailDronesSpawn_TriggerFunc");
    }

    TriggerExecute(auto_gf_TrailDronesSpawn_Trigger, false, false);
}

bool auto_gf_TrailDronesSpawn_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_TrailDronesSpawn_lp_unit;
    fixed lp_size = auto_gf_TrailDronesSpawn_lp_size;
    fixed lp_frequency = auto_gf_TrailDronesSpawn_lp_frequency;
    fixed lp_time = auto_gf_TrailDronesSpawn_lp_time;
    string lp_color = auto_gf_TrailDronesSpawn_lp_color;

    // Automatic Variable Declarations
    // Implementation
    fixed lv_size = lp_size * 100;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    while (UnitIsAlive(lp_unit)) {
        UnitCreate(1, "PointDefenseDrone", 0, 15, UnitGetPosition(lp_unit), 0);
        UnitSetScale(UnitLastCreated(), lv_size, lv_size, lv_size);
        UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
        gf_DroneKill(UnitLastCreated(), lp_time);
        Wait(1.0 / lp_frequency, c_timeGame);
    }
    return true;
}

trigger auto_gf_DroneKill_Trigger = null;
unit auto_gf_DroneKill_lp_unit;
fixed auto_gf_DroneKill_lp_time;

void gf_DroneKill (unit lp_unit, fixed lp_time) {
    auto_gf_DroneKill_lp_unit = lp_unit;
    auto_gf_DroneKill_lp_time = lp_time;

    if (auto_gf_DroneKill_Trigger == null) {
        auto_gf_DroneKill_Trigger = TriggerCreate("auto_gf_DroneKill_TriggerFunc");
    }

    TriggerExecute(auto_gf_DroneKill_Trigger, false, false);
}

bool auto_gf_DroneKill_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_gf_DroneKill_lp_unit;
    fixed lp_time = auto_gf_DroneKill_lp_time;

    // Automatic Variable Declarations
    // Implementation
    Wait(lp_time, c_timeGame);
    UnitRemove(lp_unit);
    return true;
}

trigger auto_gf_WheelOfDoom_Trigger = null;
int auto_gf_WheelOfDoom_lp_arms;
fixed auto_gf_WheelOfDoom_lp_theta;
int auto_gf_WheelOfDoom_lp_lengthOfArms;
fixed auto_gf_WheelOfDoom_lp_rotationSpeed;
point auto_gf_WheelOfDoom_lp_rotationPoint;
fixed auto_gf_WheelOfDoom_lp_droneSpacing;
fixed auto_gf_WheelOfDoom_lp_initialSpacing;
fixed auto_gf_WheelOfDoom_lp_loopFrequency;
fixed auto_gf_WheelOfDoom_lp_speed;
fixed auto_gf_WheelOfDoom_lp_time;
int auto_gf_WheelOfDoom_lp_pointVar;
int auto_gf_WheelOfDoom_lp_pointVar2;
fixed auto_gf_WheelOfDoom_lp_size;
fixed auto_gf_WheelOfDoom_lp_height;
string auto_gf_WheelOfDoom_lp_color;

void gf_WheelOfDoom (int lp_arms, fixed lp_theta, int lp_lengthOfArms, fixed lp_rotationSpeed, point lp_rotationPoint, fixed lp_droneSpacing, fixed lp_initialSpacing, fixed lp_loopFrequency, fixed lp_speed, fixed lp_time, int lp_pointVar, int lp_pointVar2, fixed lp_size, fixed lp_height, string lp_color) {
    auto_gf_WheelOfDoom_lp_arms = lp_arms;
    auto_gf_WheelOfDoom_lp_theta = lp_theta;
    auto_gf_WheelOfDoom_lp_lengthOfArms = lp_lengthOfArms;
    auto_gf_WheelOfDoom_lp_rotationSpeed = lp_rotationSpeed;
    auto_gf_WheelOfDoom_lp_rotationPoint = lp_rotationPoint;
    auto_gf_WheelOfDoom_lp_droneSpacing = lp_droneSpacing;
    auto_gf_WheelOfDoom_lp_initialSpacing = lp_initialSpacing;
    auto_gf_WheelOfDoom_lp_loopFrequency = lp_loopFrequency;
    auto_gf_WheelOfDoom_lp_speed = lp_speed;
    auto_gf_WheelOfDoom_lp_time = lp_time;
    auto_gf_WheelOfDoom_lp_pointVar = lp_pointVar;
    auto_gf_WheelOfDoom_lp_pointVar2 = lp_pointVar2;
    auto_gf_WheelOfDoom_lp_size = lp_size;
    auto_gf_WheelOfDoom_lp_height = lp_height;
    auto_gf_WheelOfDoom_lp_color = lp_color;

    if (auto_gf_WheelOfDoom_Trigger == null) {
        auto_gf_WheelOfDoom_Trigger = TriggerCreate("auto_gf_WheelOfDoom_TriggerFunc");
    }

    TriggerExecute(auto_gf_WheelOfDoom_Trigger, false, false);
}

bool auto_gf_WheelOfDoom_TriggerFunc (bool testConds, bool runActions) {
    int lp_arms = auto_gf_WheelOfDoom_lp_arms;
    fixed lp_theta = auto_gf_WheelOfDoom_lp_theta;
    int lp_lengthOfArms = auto_gf_WheelOfDoom_lp_lengthOfArms;
    fixed lp_rotationSpeed = auto_gf_WheelOfDoom_lp_rotationSpeed;
    point lp_rotationPoint = auto_gf_WheelOfDoom_lp_rotationPoint;
    fixed lp_droneSpacing = auto_gf_WheelOfDoom_lp_droneSpacing;
    fixed lp_initialSpacing = auto_gf_WheelOfDoom_lp_initialSpacing;
    fixed lp_loopFrequency = auto_gf_WheelOfDoom_lp_loopFrequency;
    fixed lp_speed = auto_gf_WheelOfDoom_lp_speed;
    fixed lp_time = auto_gf_WheelOfDoom_lp_time;
    int lp_pointVar = auto_gf_WheelOfDoom_lp_pointVar;
    int lp_pointVar2 = auto_gf_WheelOfDoom_lp_pointVar2;
    fixed lp_size = auto_gf_WheelOfDoom_lp_size;
    fixed lp_height = auto_gf_WheelOfDoom_lp_height;
    string lp_color = auto_gf_WheelOfDoom_lp_color;

    // Automatic Variable Declarations
    // Implementation
    int i = 1;
    int j;
    fixed[31] ArmAngles;
    fixed RotationPerArm = 360 / lp_arms;
    unit[31][46] RotationDrones;
    timer DeathTimer;
    unitgroup Drones;
    fixed lv_size = 100 * lp_size;
    unit RemovedUnit;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    Drones = UnitGroupEmpty();
    DeathTimer = TimerCreate();
    if (lp_time != 0.0) {
        TimerStart(TimerCreate(), lp_time, false, c_timeGame);
        DeathTimer = TimerLastStarted();
    }
    gv_pointBank[lp_pointVar][lp_pointVar2] = Point(PointGetX(lp_rotationPoint), PointGetY(lp_rotationPoint));
    for (; i <= lp_arms; i+=1) {
        ArmAngles[i] = RotationPerArm * i + lp_theta;
        j = 1;
        for (; j <= lp_lengthOfArms; j+=1) {
            UnitCreate(1, "PointDefenseDrone", 0, 15, gv_pointBank[lp_pointVar][lp_pointVar2], 0.0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
            UnitSetScale(UnitLastCreated(), lv_size, lv_size, lv_size);
            UnitSetHeight(UnitLastCreated(), lp_height, 0);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
            UnitGroupAdd(Drones, UnitLastCreated());
            UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
            RotationDrones[i][j] = UnitLastCreated();
        }
    }
    i = 1;
    j = 1;
    while (TimerGetRemaining(DeathTimer) > 0.0) {
        Wait(1.0 / lp_loopFrequency, c_timeGame);
        i = 1;
        for (; i <= lp_arms; i+=1) {
            ArmAngles[i] += lp_rotationSpeed;
            j = 1;
            for (; j <= lp_lengthOfArms; j+=1) {
                UnitIssueOrder(RotationDrones[i][j],OrderTargetingPoint(AbilityCommand("move", 0), Point((PointGetX(gv_pointBank[lp_pointVar][lp_pointVar2]) + (Cos(ArmAngles[i]) * ((lp_droneSpacing * j) + lp_initialSpacing))), (PointGetY(gv_pointBank[lp_pointVar][lp_pointVar2]) + (Sin(ArmAngles[i]) * ((lp_droneSpacing * j) + lp_initialSpacing))))), c_orderQueueReplace);
            }
        }
    }
    i = UnitGroupCount(Drones, c_unitCountAll);
    for (;; i-=1){
        RemovedUnit = UnitGroupUnitFromEnd(Drones, i);
        if (RemovedUnit == null) {break;}
        UnitRemove(RemovedUnit);
    }
    return true;
}

trigger auto_gf_TraditionalYellow_Trigger = null;
fixed auto_gf_TraditionalYellow_lp_frequency;
int auto_gf_TraditionalYellow_lp_num;
fixed auto_gf_TraditionalYellow_lp_size;
point auto_gf_TraditionalYellow_lp_originPoint;
fixed auto_gf_TraditionalYellow_lp_theta;
fixed auto_gf_TraditionalYellow_lp_delta;
string auto_gf_TraditionalYellow_lp_color;
int auto_gf_TraditionalYellow_lp_moveCommands;
int auto_gf_TraditionalYellow_lp_thread;
fixed auto_gf_TraditionalYellow_lp_distancePerCommand;
fixed auto_gf_TraditionalYellow_lp_rotationAmount;
fixed auto_gf_TraditionalYellow_lp_speed;
fixed auto_gf_TraditionalYellow_lp_finalDistance;
fixed auto_gf_TraditionalYellow_lp_angleChangeReduction;
fixed auto_gf_TraditionalYellow_lp_theImBadAtMathParameter;
fixed auto_gf_TraditionalYellow_lp_height;
fixed auto_gf_TraditionalYellow_lp_initialDelay;
bool auto_gf_TraditionalYellow_lp_interRandom;
bool auto_gf_TraditionalYellow_lp_intraRandom;

void gf_TraditionalYellow (fixed lp_frequency, int lp_num, fixed lp_size, point lp_originPoint, fixed lp_theta, fixed lp_delta, string lp_color, int lp_moveCommands, int lp_thread, fixed lp_distancePerCommand, fixed lp_rotationAmount, fixed lp_speed, fixed lp_finalDistance, fixed lp_angleChangeReduction, fixed lp_theImBadAtMathParameter, fixed lp_height, fixed lp_initialDelay, bool lp_interRandom, bool lp_intraRandom) {
    auto_gf_TraditionalYellow_lp_frequency = lp_frequency;
    auto_gf_TraditionalYellow_lp_num = lp_num;
    auto_gf_TraditionalYellow_lp_size = lp_size;
    auto_gf_TraditionalYellow_lp_originPoint = lp_originPoint;
    auto_gf_TraditionalYellow_lp_theta = lp_theta;
    auto_gf_TraditionalYellow_lp_delta = lp_delta;
    auto_gf_TraditionalYellow_lp_color = lp_color;
    auto_gf_TraditionalYellow_lp_moveCommands = lp_moveCommands;
    auto_gf_TraditionalYellow_lp_thread = lp_thread;
    auto_gf_TraditionalYellow_lp_distancePerCommand = lp_distancePerCommand;
    auto_gf_TraditionalYellow_lp_rotationAmount = lp_rotationAmount;
    auto_gf_TraditionalYellow_lp_speed = lp_speed;
    auto_gf_TraditionalYellow_lp_finalDistance = lp_finalDistance;
    auto_gf_TraditionalYellow_lp_angleChangeReduction = lp_angleChangeReduction;
    auto_gf_TraditionalYellow_lp_theImBadAtMathParameter = lp_theImBadAtMathParameter;
    auto_gf_TraditionalYellow_lp_height = lp_height;
    auto_gf_TraditionalYellow_lp_initialDelay = lp_initialDelay;
    auto_gf_TraditionalYellow_lp_interRandom = lp_interRandom;
    auto_gf_TraditionalYellow_lp_intraRandom = lp_intraRandom;

    if (auto_gf_TraditionalYellow_Trigger == null) {
        auto_gf_TraditionalYellow_Trigger = TriggerCreate("auto_gf_TraditionalYellow_TriggerFunc");
    }

    TriggerExecute(auto_gf_TraditionalYellow_Trigger, false, false);
}

bool auto_gf_TraditionalYellow_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_frequency = auto_gf_TraditionalYellow_lp_frequency;
    int lp_num = auto_gf_TraditionalYellow_lp_num;
    fixed lp_size = auto_gf_TraditionalYellow_lp_size;
    point lp_originPoint = auto_gf_TraditionalYellow_lp_originPoint;
    fixed lp_theta = auto_gf_TraditionalYellow_lp_theta;
    fixed lp_delta = auto_gf_TraditionalYellow_lp_delta;
    string lp_color = auto_gf_TraditionalYellow_lp_color;
    int lp_moveCommands = auto_gf_TraditionalYellow_lp_moveCommands;
    int lp_thread = auto_gf_TraditionalYellow_lp_thread;
    fixed lp_distancePerCommand = auto_gf_TraditionalYellow_lp_distancePerCommand;
    fixed lp_rotationAmount = auto_gf_TraditionalYellow_lp_rotationAmount;
    fixed lp_speed = auto_gf_TraditionalYellow_lp_speed;
    fixed lp_finalDistance = auto_gf_TraditionalYellow_lp_finalDistance;
    fixed lp_angleChangeReduction = auto_gf_TraditionalYellow_lp_angleChangeReduction;
    fixed lp_theImBadAtMathParameter = auto_gf_TraditionalYellow_lp_theImBadAtMathParameter;
    fixed lp_height = auto_gf_TraditionalYellow_lp_height;
    fixed lp_initialDelay = auto_gf_TraditionalYellow_lp_initialDelay;
    bool lp_interRandom = auto_gf_TraditionalYellow_lp_interRandom;
    bool lp_intraRandom = auto_gf_TraditionalYellow_lp_intraRandom;

    // Automatic Variable Declarations
    // Implementation
    int i;
    int j = 2;
    fixed Angle;
    fixed AngleTemp;
    fixed AnotherAngleVariable;
    fixed Size = lp_size * 100;
    fixed AngleDifferenceBetweenDrones = 360.0 / IntToFixed(lp_num);
    fixed m;
    fixed b;
    fixed x1;
    fixed y1;
    fixed x2;
    fixed y2;
    point point1;
    point point2;
    point point3;
    point point4;
    fixed x;
    fixed xx;
    fixed y;
    fixed yy;
    fixed p;
    fixed q;
    fixed d = lp_finalDistance;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    Wait(lp_initialDelay, c_timeGame);
    while (lp_thread == gv_thread) {
        if (!lp_interRandom) {
            AnotherAngleVariable += lp_delta;
            Angle += lp_theta + AnotherAngleVariable;
        } else {
            Angle = RandomFixed(0, 360);
        }
        AngleTemp = Angle;
        for (; i<lp_num; i+=1) {
            UnitCreate(1, gv_drone, 0, 15, lp_originPoint, Angle);
            UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
            UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_originPoint, lp_distancePerCommand, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
            for (; j<lp_moveCommands + 2; j+=1) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_originPoint, lp_distancePerCommand * j, AngleTemp)), c_orderQueueAddToEnd);
                AngleTemp += lp_rotationAmount - lp_angleChangeReduction;
            }
            point1 = PointWithOffsetPolar(lp_originPoint, lp_distancePerCommand * (j-1), AngleTemp - lp_rotationAmount + lp_angleChangeReduction);
            point2 = PointWithOffsetPolar(lp_originPoint, lp_distancePerCommand * j, AngleTemp);
            x1 = PointGetX(point1);
            x2 = PointGetX(point2);
            y1 = PointGetY(point1);
            y2 = PointGetY(point2);
            p = PointGetX(lp_originPoint);
            q = PointGetY(lp_originPoint);
            m = (y2 - y1) / (x2 - x1);
            b = y1 - m * x1;
            if (m > 10 || m < -10) {
                x = x2;
                xx = x2 + 1;
                if (y2 > y1) {
                    y = y2 + lp_theImBadAtMathParameter;
                    yy = y2 + lp_theImBadAtMathParameter;
                } else {
                    y = y2 - lp_theImBadAtMathParameter;
                    yy = y2 - lp_theImBadAtMathParameter;
                }
            } else {
                x = (p + m*q - m*b - SquareRoot(-q*q + 2*b*q + 2*p*m*q + d*d + d*d*m*m - p*p*m*m - 2*p*m*b - b*b))/(1 + m*m);
                xx = (p + m*q - m*b + SquareRoot(-q*q + 2*b*q + 2*p*m*q + d*d + d*d*m*m - p*p*m*m - 2*p*m*b - b*b))/(1 + m*m);
                y = m * x + b;
                yy = m * xx + b;
            }
            point3 = Point(x, y);
            point4 = Point(xx, yy);
            if (DistanceBetweenPoints(point2, point3) > DistanceBetweenPoints(point2, point4)) {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), point4), c_orderQueueAddToEnd);
            } else {
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), point3), c_orderQueueAddToEnd);
            }
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
            UnitSetScale(UnitLastCreated(), Size, Size, Size);
            UnitSetHeight(UnitLastCreated(), lp_height, 0);
            if (lp_intraRandom) {
                Angle = RandomFixed(0, 360);
            } else {
                Angle += AngleDifferenceBetweenDrones;
            }
            AngleTemp = Angle;
            j = 2;
        }
        Wait(1/lp_frequency, c_timeGame);
        i = 0;
    } 
    return true;
}

trigger auto_gf_NeoYellow_Trigger = null;
int auto_gf_NeoYellow_lp_num;
point auto_gf_NeoYellow_lp_originPoint;
fixed auto_gf_NeoYellow_lp_theta;
fixed auto_gf_NeoYellow_lp_delta;
fixed auto_gf_NeoYellow_lp_size;
fixed auto_gf_NeoYellow_lp_speed;
bool auto_gf_NeoYellow_lp_interRandom;
bool auto_gf_NeoYellow_lp_intraRandom;
string auto_gf_NeoYellow_lp_color;
int auto_gf_NeoYellow_lp_thread;
fixed auto_gf_NeoYellow_lp_angleDelta;
fixed auto_gf_NeoYellow_lp_time;
fixed auto_gf_NeoYellow_lp_distancePer;
fixed auto_gf_NeoYellow_lp_moveLoopWait;
fixed auto_gf_NeoYellow_lp_frequency;
int auto_gf_NeoYellow_lp_instance;
fixed auto_gf_NeoYellow_lp_height;

void gf_NeoYellow (int lp_num, point lp_originPoint, fixed lp_theta, fixed lp_delta, fixed lp_size, fixed lp_speed, bool lp_interRandom, bool lp_intraRandom, string lp_color, int lp_thread, fixed lp_angleDelta, fixed lp_time, fixed lp_distancePer, fixed lp_moveLoopWait, fixed lp_frequency, int lp_instance, fixed lp_height) {
    auto_gf_NeoYellow_lp_num = lp_num;
    auto_gf_NeoYellow_lp_originPoint = lp_originPoint;
    auto_gf_NeoYellow_lp_theta = lp_theta;
    auto_gf_NeoYellow_lp_delta = lp_delta;
    auto_gf_NeoYellow_lp_size = lp_size;
    auto_gf_NeoYellow_lp_speed = lp_speed;
    auto_gf_NeoYellow_lp_interRandom = lp_interRandom;
    auto_gf_NeoYellow_lp_intraRandom = lp_intraRandom;
    auto_gf_NeoYellow_lp_color = lp_color;
    auto_gf_NeoYellow_lp_thread = lp_thread;
    auto_gf_NeoYellow_lp_angleDelta = lp_angleDelta;
    auto_gf_NeoYellow_lp_time = lp_time;
    auto_gf_NeoYellow_lp_distancePer = lp_distancePer;
    auto_gf_NeoYellow_lp_moveLoopWait = lp_moveLoopWait;
    auto_gf_NeoYellow_lp_frequency = lp_frequency;
    auto_gf_NeoYellow_lp_instance = lp_instance;
    auto_gf_NeoYellow_lp_height = lp_height;

    if (auto_gf_NeoYellow_Trigger == null) {
        auto_gf_NeoYellow_Trigger = TriggerCreate("auto_gf_NeoYellow_TriggerFunc");
    }

    TriggerExecute(auto_gf_NeoYellow_Trigger, false, false);
}

bool auto_gf_NeoYellow_TriggerFunc (bool testConds, bool runActions) {
    int lp_num = auto_gf_NeoYellow_lp_num;
    point lp_originPoint = auto_gf_NeoYellow_lp_originPoint;
    fixed lp_theta = auto_gf_NeoYellow_lp_theta;
    fixed lp_delta = auto_gf_NeoYellow_lp_delta;
    fixed lp_size = auto_gf_NeoYellow_lp_size;
    fixed lp_speed = auto_gf_NeoYellow_lp_speed;
    bool lp_interRandom = auto_gf_NeoYellow_lp_interRandom;
    bool lp_intraRandom = auto_gf_NeoYellow_lp_intraRandom;
    string lp_color = auto_gf_NeoYellow_lp_color;
    int lp_thread = auto_gf_NeoYellow_lp_thread;
    fixed lp_angleDelta = auto_gf_NeoYellow_lp_angleDelta;
    fixed lp_time = auto_gf_NeoYellow_lp_time;
    fixed lp_distancePer = auto_gf_NeoYellow_lp_distancePer;
    fixed lp_moveLoopWait = auto_gf_NeoYellow_lp_moveLoopWait;
    fixed lp_frequency = auto_gf_NeoYellow_lp_frequency;
    int lp_instance = auto_gf_NeoYellow_lp_instance;
    fixed lp_height = auto_gf_NeoYellow_lp_height;

    // Automatic Variable Declarations
    // Implementation
    int i = 0;
    fixed Angle = lp_theta;
    fixed AngleDifferenceBetweenDrones = 360.0/IntToFixed(lp_num);
    fixed Size = 100.0 * lp_size;
    int SizeGroup = GetSizeArrayPosition(lp_size);
    int j;
    while (lp_thread == gv_thread) {
        for (; i < lp_num; i+=1) {
            UnitCreate(1, gv_drone, 0, 15, lp_originPoint, Angle);
            Angle += AngleDifferenceBetweenDrones;
            UnitGroupAdd(gv_neoYellowDrones[lp_instance][j], UnitLastCreated());
            UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
            UnitSetScale(UnitLastCreated(), Size, Size, Size);
            UnitSetHeight(UnitLastCreated(), lp_height, 0);
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
            if (lp_intraRandom) {
                Angle = RandomFixed(0, 360);
            }
        }
        gf_NeoYellowMove(lp_speed, lp_angleDelta, lp_num, lp_distancePer, lp_moveLoopWait, lp_instance, j);
        gf_NeoYellowKill(lp_time, lp_instance, j);
        i = 0;
        if (j < 50) {
            j += 1;
        } else {
            j = 0;
        }
        if (!lp_interRandom) {
            Angle += lp_delta;
        } else {
            Angle = RandomFixed(0, 360);
        }
        Wait(1.0/lp_frequency, c_timeGame);
    }
    return true;
}

trigger auto_gf_NeoYellowMove_Trigger = null;
fixed auto_gf_NeoYellowMove_lp_speed;
fixed auto_gf_NeoYellowMove_lp_angleDelta;
int auto_gf_NeoYellowMove_lp_num;
fixed auto_gf_NeoYellowMove_lp_distancePer;
fixed auto_gf_NeoYellowMove_lp_moveLoopWait;
int auto_gf_NeoYellowMove_lp_instance;
int auto_gf_NeoYellowMove_lp_groupNum;

void gf_NeoYellowMove (fixed lp_speed, fixed lp_angleDelta, int lp_num, fixed lp_distancePer, fixed lp_moveLoopWait, int lp_instance, int lp_groupNum) {
    auto_gf_NeoYellowMove_lp_speed = lp_speed;
    auto_gf_NeoYellowMove_lp_angleDelta = lp_angleDelta;
    auto_gf_NeoYellowMove_lp_num = lp_num;
    auto_gf_NeoYellowMove_lp_distancePer = lp_distancePer;
    auto_gf_NeoYellowMove_lp_moveLoopWait = lp_moveLoopWait;
    auto_gf_NeoYellowMove_lp_instance = lp_instance;
    auto_gf_NeoYellowMove_lp_groupNum = lp_groupNum;

    if (auto_gf_NeoYellowMove_Trigger == null) {
        auto_gf_NeoYellowMove_Trigger = TriggerCreate("auto_gf_NeoYellowMove_TriggerFunc");
    }

    TriggerExecute(auto_gf_NeoYellowMove_Trigger, false, false);
}

bool auto_gf_NeoYellowMove_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_speed = auto_gf_NeoYellowMove_lp_speed;
    fixed lp_angleDelta = auto_gf_NeoYellowMove_lp_angleDelta;
    int lp_num = auto_gf_NeoYellowMove_lp_num;
    fixed lp_distancePer = auto_gf_NeoYellowMove_lp_distancePer;
    fixed lp_moveLoopWait = auto_gf_NeoYellowMove_lp_moveLoopWait;
    int lp_instance = auto_gf_NeoYellowMove_lp_instance;
    int lp_groupNum = auto_gf_NeoYellowMove_lp_groupNum;

    // Automatic Variable Declarations
    // Implementation
        int i;
        unit PickedUnit;
        while (UnitGroupCount(gv_neoYellowDrones[lp_instance][lp_groupNum], c_unitCountAlive) != 0){
            for (; i <= lp_num; i+=1) {
                PickedUnit = UnitGroupUnitFromEnd(gv_neoYellowDrones[lp_instance][lp_groupNum], i);
                if (PickedUnit != null) {
                    UnitSetFacing(PickedUnit, UnitGetFacing(PickedUnit) + lp_angleDelta, 0.0);
                    UnitIssueOrder(PickedUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(PickedUnit), lp_distancePer, UnitGetFacing(PickedUnit))), c_orderQueueReplace);
                }
            }
            i = 0;
            Wait(lp_moveLoopWait, c_timeGame);
        }
    return true;
}

trigger auto_gf_NeoYellowKill_Trigger = null;
fixed auto_gf_NeoYellowKill_lp_time;
int auto_gf_NeoYellowKill_lp_instance;
int auto_gf_NeoYellowKill_lp_groupNum;

void gf_NeoYellowKill (fixed lp_time, int lp_instance, int lp_groupNum) {
    auto_gf_NeoYellowKill_lp_time = lp_time;
    auto_gf_NeoYellowKill_lp_instance = lp_instance;
    auto_gf_NeoYellowKill_lp_groupNum = lp_groupNum;

    if (auto_gf_NeoYellowKill_Trigger == null) {
        auto_gf_NeoYellowKill_Trigger = TriggerCreate("auto_gf_NeoYellowKill_TriggerFunc");
    }

    TriggerExecute(auto_gf_NeoYellowKill_Trigger, false, false);
}

bool auto_gf_NeoYellowKill_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_time = auto_gf_NeoYellowKill_lp_time;
    int lp_instance = auto_gf_NeoYellowKill_lp_instance;
    int lp_groupNum = auto_gf_NeoYellowKill_lp_groupNum;

    // Automatic Variable Declarations
    // Implementation
    unit PickedUnit;
    int i;
    int Units = UnitGroupCount(gv_neoYellowDrones[lp_instance][lp_groupNum], c_unitCountAlive);
    Wait(lp_time, c_timeGame);
    for (; i <= Units; i+=1){
        PickedUnit = UnitGroupUnitFromEnd(gv_neoYellowDrones[lp_instance][lp_groupNum], i);
        UnitRemove(PickedUnit);
    }
    UnitGroupClear(gv_neoYellowDrones[lp_instance][lp_groupNum]);
    return true;
}

trigger auto_gf_MovePointCircle_Trigger = null;
fixed auto_gf_MovePointCircle_lp_radius;
fixed auto_gf_MovePointCircle_lp_theta;
fixed auto_gf_MovePointCircle_lp_delta;
fixed auto_gf_MovePointCircle_lp_frequencyOfMovement;
point auto_gf_MovePointCircle_lp_centerPoint;
int auto_gf_MovePointCircle_lp_thread;
int auto_gf_MovePointCircle_lp_pointVar;
int auto_gf_MovePointCircle_lp_pointVar2;

void gf_MovePointCircle (fixed lp_radius, fixed lp_theta, fixed lp_delta, fixed lp_frequencyOfMovement, point lp_centerPoint, int lp_thread, int lp_pointVar, int lp_pointVar2) {
    auto_gf_MovePointCircle_lp_radius = lp_radius;
    auto_gf_MovePointCircle_lp_theta = lp_theta;
    auto_gf_MovePointCircle_lp_delta = lp_delta;
    auto_gf_MovePointCircle_lp_frequencyOfMovement = lp_frequencyOfMovement;
    auto_gf_MovePointCircle_lp_centerPoint = lp_centerPoint;
    auto_gf_MovePointCircle_lp_thread = lp_thread;
    auto_gf_MovePointCircle_lp_pointVar = lp_pointVar;
    auto_gf_MovePointCircle_lp_pointVar2 = lp_pointVar2;

    if (auto_gf_MovePointCircle_Trigger == null) {
        auto_gf_MovePointCircle_Trigger = TriggerCreate("auto_gf_MovePointCircle_TriggerFunc");
    }

    TriggerExecute(auto_gf_MovePointCircle_Trigger, false, false);
}

bool auto_gf_MovePointCircle_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_radius = auto_gf_MovePointCircle_lp_radius;
    fixed lp_theta = auto_gf_MovePointCircle_lp_theta;
    fixed lp_delta = auto_gf_MovePointCircle_lp_delta;
    fixed lp_frequencyOfMovement = auto_gf_MovePointCircle_lp_frequencyOfMovement;
    point lp_centerPoint = auto_gf_MovePointCircle_lp_centerPoint;
    int lp_thread = auto_gf_MovePointCircle_lp_thread;
    int lp_pointVar = auto_gf_MovePointCircle_lp_pointVar;
    int lp_pointVar2 = auto_gf_MovePointCircle_lp_pointVar2;

    // Variable Declarations
    fixed lv_angle;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_angle = lp_delta;
    while ((gv_thread == lp_thread)) {
        PointSet(gv_pointBank[lp_pointVar][lp_pointVar2], PointWithOffsetPolar(lp_centerPoint, lp_radius, lv_angle));
        Wait((1.0 / lp_frequencyOfMovement), c_timeGame);
        lv_angle += lp_delta;
    }
    return true;
}

trigger auto_gf_MovePointStraight_Trigger = null;
point auto_gf_MovePointStraight_lp_destinationPoint;
fixed auto_gf_MovePointStraight_lp_distancePerLoop;
fixed auto_gf_MovePointStraight_lp_frequencyOfLoop;
int auto_gf_MovePointStraight_lp_thread;
int auto_gf_MovePointStraight_lp_pointVar;
int auto_gf_MovePointStraight_lp_pointVar2;

void gf_MovePointStraight (point lp_destinationPoint, fixed lp_distancePerLoop, fixed lp_frequencyOfLoop, int lp_thread, int lp_pointVar, int lp_pointVar2) {
    auto_gf_MovePointStraight_lp_destinationPoint = lp_destinationPoint;
    auto_gf_MovePointStraight_lp_distancePerLoop = lp_distancePerLoop;
    auto_gf_MovePointStraight_lp_frequencyOfLoop = lp_frequencyOfLoop;
    auto_gf_MovePointStraight_lp_thread = lp_thread;
    auto_gf_MovePointStraight_lp_pointVar = lp_pointVar;
    auto_gf_MovePointStraight_lp_pointVar2 = lp_pointVar2;

    if (auto_gf_MovePointStraight_Trigger == null) {
        auto_gf_MovePointStraight_Trigger = TriggerCreate("auto_gf_MovePointStraight_TriggerFunc");
    }

    TriggerExecute(auto_gf_MovePointStraight_Trigger, false, false);
}

bool auto_gf_MovePointStraight_TriggerFunc (bool testConds, bool runActions) {
    point lp_destinationPoint = auto_gf_MovePointStraight_lp_destinationPoint;
    fixed lp_distancePerLoop = auto_gf_MovePointStraight_lp_distancePerLoop;
    fixed lp_frequencyOfLoop = auto_gf_MovePointStraight_lp_frequencyOfLoop;
    int lp_thread = auto_gf_MovePointStraight_lp_thread;
    int lp_pointVar = auto_gf_MovePointStraight_lp_pointVar;
    int lp_pointVar2 = auto_gf_MovePointStraight_lp_pointVar2;

    // Variable Declarations
    fixed lv_normalizedDistance;
    fixed lv_distanceFromOriginToDestination;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv_distanceFromOriginToDestination = DistanceBetweenPoints(gv_pointBank[lp_pointVar][lp_pointVar2], lp_destinationPoint);
    lv_normalizedDistance = ((ModF(lv_distanceFromOriginToDestination, lp_distancePerLoop) / Trunc((lv_distanceFromOriginToDestination / lp_distancePerLoop))) + lp_distancePerLoop);
    while ((gv_thread == lp_thread) && (DistanceBetweenPoints(gv_pointBank[lp_pointVar][lp_pointVar2], lp_destinationPoint) > lv_normalizedDistance)) {
        Wait((1.0 / lp_frequencyOfLoop), c_timeGame);
        PointSet(gv_pointBank[lp_pointVar][lp_pointVar2], libNtve_gf_PointOffsetTowardsPoint(gv_pointBank[lp_pointVar][lp_pointVar2], lv_normalizedDistance, lp_destinationPoint));
    }
    return true;
}

trigger auto_gf_MovePointToUnit_Trigger = null;
unit auto_gf_MovePointToUnit_lp_unitA;
point auto_gf_MovePointToUnit_lp_movedPoint;
fixed auto_gf_MovePointToUnit_lp_frequency;
int auto_gf_MovePointToUnit_lp_thread;

void gf_MovePointToUnit (unit lp_unitA, point lp_movedPoint, fixed lp_frequency, int lp_thread) {
    auto_gf_MovePointToUnit_lp_unitA = lp_unitA;
    auto_gf_MovePointToUnit_lp_movedPoint = lp_movedPoint;
    auto_gf_MovePointToUnit_lp_frequency = lp_frequency;
    auto_gf_MovePointToUnit_lp_thread = lp_thread;

    if (auto_gf_MovePointToUnit_Trigger == null) {
        auto_gf_MovePointToUnit_Trigger = TriggerCreate("auto_gf_MovePointToUnit_TriggerFunc");
    }

    TriggerExecute(auto_gf_MovePointToUnit_Trigger, false, false);
}

bool auto_gf_MovePointToUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unitA = auto_gf_MovePointToUnit_lp_unitA;
    point lp_movedPoint = auto_gf_MovePointToUnit_lp_movedPoint;
    fixed lp_frequency = auto_gf_MovePointToUnit_lp_frequency;
    int lp_thread = auto_gf_MovePointToUnit_lp_thread;

    // Automatic Variable Declarations
    // Implementation
    while (lp_thread == gv_thread) {
      PointSet(lp_movedPoint, UnitGetPosition(lp_unitA));
      Wait(1.0/lp_frequency, c_timeGame);
    }
    return true;
}

void gf_SpawnGrey (int lp__1, int lp__2, int lp__3, int lp__4, int lp__5, int lp__6, int lp__7, int lp__8, int lp__9, int lp__10, int lp__11, int lp__12, int lp__13, int lp__14, int lp__15, int lp__16, int lp__17, int lp__18, int lp__19, fixed lp_droneSpeed, fixed lp_size, string lp_color, bool lp_laneContained, bool lp_spawnTrail, fixed lp_trailSize, string lp_trailColor, fixed lp_trailFrequency, fixed lp_trailTime) {
    // Variable Declarations
    int lv_iter;
    int lv_iter2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_SpawnGreySingleLane(RegionFromId(26), lp__1, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(43), lp__2, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(42), lp__3, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(41), lp__4, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(40), lp__5, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(39), lp__6, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(38), lp__7, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(37), lp__8, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(36), lp__9, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(35), lp__10, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(34), lp__11, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(33), lp__12, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(32), lp__13, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(31), lp__14, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(30), lp__15, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(29), lp__16, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(28), lp__17, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(27), lp__18, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
    gf_SpawnGreySingleLane(RegionFromId(25), lp__19, lp_droneSpeed, lp_size, lp_color, lp_laneContained, lp_spawnTrail, lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
}

void gf_SpawnGreySingleLane (region lp_lane, int lp_numOfDrones, fixed lp_droneSpeed, fixed lp_size, string lp_color, bool lp_laneContained, bool lp_spawnTrail, fixed lp_trailSize, fixed lp_trailFrequency, fixed lp_trailTime, string lp_trailColor) {
    // Automatic Variable Declarations
    // Implementation
    int SizeGroup = GetSizeArrayPosition(lp_size);
    int i = 1;
    fixed size = lp_size * 100;
    for (; i <= lp_numOfDrones; i+=1){
        UnitCreate(1, gv_drone, 0, 15, RegionRandomPoint(lp_lane), RandomFixed(0, 360));
        UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
        if (lp_laneContained){
            UnitGroupAdd(gv_greyDrones, UnitLastCreated());
        } else {
            UnitGroupAdd(gv_purpleDrones, UnitLastCreated());
        }
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropBaseMovementSpeed, lp_droneSpeed);
        UnitSetScale(UnitLastCreated(), size, size, size);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
        if (lp_spawnTrail) {
            gf_TrailDronesSpawn(UnitLastCreated(), lp_trailSize, lp_trailFrequency, lp_trailTime, lp_trailColor);
        }
    }
}

trigger auto_gf_PointToDistanceBlue_Trigger = null;
fixed auto_gf_PointToDistanceBlue_lp_frequency;
fixed auto_gf_PointToDistanceBlue_lp_delta;
fixed auto_gf_PointToDistanceBlue_lp_theta;
fixed auto_gf_PointToDistanceBlue_lp_speed;
fixed auto_gf_PointToDistanceBlue_lp_size;
fixed auto_gf_PointToDistanceBlue_lp_distance;
fixed auto_gf_PointToDistanceBlue_lp_arcLength;
int auto_gf_PointToDistanceBlue_lp_num;
int auto_gf_PointToDistanceBlue_lp_num2;
fixed auto_gf_PointToDistanceBlue_lp_delay;
point auto_gf_PointToDistanceBlue_lp_originPoint;
fixed auto_gf_PointToDistanceBlue_lp_originOffset;
fixed auto_gf_PointToDistanceBlue_lp_spacing;
fixed auto_gf_PointToDistanceBlue_lp_lineTheta;
fixed auto_gf_PointToDistanceBlue_lp_lineDelta;
fixed auto_gf_PointToDistanceBlue_lp_waveSpawnArcLength;
bool auto_gf_PointToDistanceBlue_lp_interRandom;
bool auto_gf_PointToDistanceBlue_lp_intraRandom;
string auto_gf_PointToDistanceBlue_lp_color;
int auto_gf_PointToDistanceBlue_lp_thread;
fixed auto_gf_PointToDistanceBlue_lp_height;

void gf_PointToDistanceBlue (fixed lp_frequency, fixed lp_delta, fixed lp_theta, fixed lp_speed, fixed lp_size, fixed lp_distance, fixed lp_arcLength, int lp_num, int lp_num2, fixed lp_delay, point lp_originPoint, fixed lp_originOffset, fixed lp_spacing, fixed lp_lineTheta, fixed lp_lineDelta, fixed lp_waveSpawnArcLength, bool lp_interRandom, bool lp_intraRandom, string lp_color, int lp_thread, fixed lp_height) {
    auto_gf_PointToDistanceBlue_lp_frequency = lp_frequency;
    auto_gf_PointToDistanceBlue_lp_delta = lp_delta;
    auto_gf_PointToDistanceBlue_lp_theta = lp_theta;
    auto_gf_PointToDistanceBlue_lp_speed = lp_speed;
    auto_gf_PointToDistanceBlue_lp_size = lp_size;
    auto_gf_PointToDistanceBlue_lp_distance = lp_distance;
    auto_gf_PointToDistanceBlue_lp_arcLength = lp_arcLength;
    auto_gf_PointToDistanceBlue_lp_num = lp_num;
    auto_gf_PointToDistanceBlue_lp_num2 = lp_num2;
    auto_gf_PointToDistanceBlue_lp_delay = lp_delay;
    auto_gf_PointToDistanceBlue_lp_originPoint = lp_originPoint;
    auto_gf_PointToDistanceBlue_lp_originOffset = lp_originOffset;
    auto_gf_PointToDistanceBlue_lp_spacing = lp_spacing;
    auto_gf_PointToDistanceBlue_lp_lineTheta = lp_lineTheta;
    auto_gf_PointToDistanceBlue_lp_lineDelta = lp_lineDelta;
    auto_gf_PointToDistanceBlue_lp_waveSpawnArcLength = lp_waveSpawnArcLength;
    auto_gf_PointToDistanceBlue_lp_interRandom = lp_interRandom;
    auto_gf_PointToDistanceBlue_lp_intraRandom = lp_intraRandom;
    auto_gf_PointToDistanceBlue_lp_color = lp_color;
    auto_gf_PointToDistanceBlue_lp_thread = lp_thread;
    auto_gf_PointToDistanceBlue_lp_height = lp_height;

    if (auto_gf_PointToDistanceBlue_Trigger == null) {
        auto_gf_PointToDistanceBlue_Trigger = TriggerCreate("auto_gf_PointToDistanceBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_PointToDistanceBlue_Trigger, false, false);
}

bool auto_gf_PointToDistanceBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_frequency = auto_gf_PointToDistanceBlue_lp_frequency;
    fixed lp_delta = auto_gf_PointToDistanceBlue_lp_delta;
    fixed lp_theta = auto_gf_PointToDistanceBlue_lp_theta;
    fixed lp_speed = auto_gf_PointToDistanceBlue_lp_speed;
    fixed lp_size = auto_gf_PointToDistanceBlue_lp_size;
    fixed lp_distance = auto_gf_PointToDistanceBlue_lp_distance;
    fixed lp_arcLength = auto_gf_PointToDistanceBlue_lp_arcLength;
    int lp_num = auto_gf_PointToDistanceBlue_lp_num;
    int lp_num2 = auto_gf_PointToDistanceBlue_lp_num2;
    fixed lp_delay = auto_gf_PointToDistanceBlue_lp_delay;
    point lp_originPoint = auto_gf_PointToDistanceBlue_lp_originPoint;
    fixed lp_originOffset = auto_gf_PointToDistanceBlue_lp_originOffset;
    fixed lp_spacing = auto_gf_PointToDistanceBlue_lp_spacing;
    fixed lp_lineTheta = auto_gf_PointToDistanceBlue_lp_lineTheta;
    fixed lp_lineDelta = auto_gf_PointToDistanceBlue_lp_lineDelta;
    fixed lp_waveSpawnArcLength = auto_gf_PointToDistanceBlue_lp_waveSpawnArcLength;
    bool lp_interRandom = auto_gf_PointToDistanceBlue_lp_interRandom;
    bool lp_intraRandom = auto_gf_PointToDistanceBlue_lp_intraRandom;
    string lp_color = auto_gf_PointToDistanceBlue_lp_color;
    int lp_thread = auto_gf_PointToDistanceBlue_lp_thread;
    fixed lp_height = auto_gf_PointToDistanceBlue_lp_height;

    // Automatic Variable Declarations
    // Implementation
    fixed AngleDifferenceBetweenDrones;
    fixed MoveDistance;
    fixed WallDistancing;
    fixed LineAngle;
    fixed Angle;
    fixed Delta = lp_delta;
    fixed LineDelta = lp_lineDelta;
    fixed Size = lp_size * 100;
    fixed ArcLength = 360;
    int i;
    int j;
    int k = 2;
    int MoveCount = 1;
    int SizeGroup;
    Wait(lp_delay, c_timeGame);
    SizeGroup = GetSizeArrayPosition(lp_size);
    if (PointGetX(lp_originPoint) <= PointGetY(lp_originPoint)) {
        if (PointGetX(lp_originPoint) <= (lp_distance - 5)){
            MoveCount = FixedToInt(lp_distance/PointGetX(lp_originPoint));
            MoveDistance = lp_distance/MoveCount;
        } else {
            MoveDistance = lp_distance;
        }
    } else {
        if (PointGetY(lp_originPoint) <= lp_distance - 5) {
            MoveCount = FixedToInt(lp_distance/PointGetY(lp_originPoint));
            MoveDistance = lp_distance/MoveCount;
        } else {
            MoveDistance = lp_distance;
        }
    }
    if (lp_intraRandom) {
        if (lp_arcLength > 0) {
            ArcLength = lp_arcLength;
        }
    } else if (lp_waveSpawnArcLength > 0){
        AngleDifferenceBetweenDrones = lp_waveSpawnArcLength/IntToFixed(lp_num);
    } else {
        AngleDifferenceBetweenDrones = 360.0/IntToFixed(lp_num);
    }
    Angle = lp_theta;
    LineAngle = lp_lineTheta;
    while (gv_thread == lp_thread) {
        i = 1;
        for (; i <= lp_num; i+=1) {
            WallDistancing = 0;
            j = 0;
            for (; j < lp_num2; j+=1) {
                UnitCreate(1, gv_drone, 0, 15, PointWithOffsetPolar(lp_originPoint, WallDistancing + lp_originOffset, Angle + AngleDifferenceBetweenDrones * i), Angle + LineAngle + AngleDifferenceBetweenDrones * i);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), MoveDistance, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
                for (; k <= MoveCount; k+=1) {
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), MoveDistance * k, UnitGetFacing(UnitLastCreated()))), c_orderQueueAddToEnd);
                }
                k = 2;
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor " + lp_color);
                UnitSetScale(UnitLastCreated(), Size, Size, Size);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitGroupAdd(gv_droneSizeGroup[SizeGroup], UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
                UnitSetHeight(UnitLastCreated(), lp_height, 0);
                WallDistancing += lp_spacing;
            }
            if (lp_intraRandom) {
                Angle = RandomFixed(lp_theta, ArcLength + lp_theta);
            }
            
        }
        Wait(1/lp_frequency, c_timeGame);
        
        if (!lp_interRandom){
            Angle += Delta;
        } else {
            Angle = RandomFixed(lp_theta, ArcLength + lp_theta);
        }
        if (lp_num2 == 1) {
            LineAngle = 0;
        } else {
            LineAngle += LineDelta;
        }
        if ((gf_GetAbsoluteValue(Angle) >= lp_arcLength + lp_theta || Angle <= lp_theta) && lp_arcLength != 0){
            Delta *= -1;
            LineDelta *= -1;
        }
    }
    return true;
}

trigger auto_gf_AutoClicker_Trigger = null;
int auto_gf_AutoClicker_lp_player;

void gf_AutoClicker (int lp_player) {
    auto_gf_AutoClicker_lp_player = lp_player;

    if (auto_gf_AutoClicker_Trigger == null) {
        auto_gf_AutoClicker_Trigger = TriggerCreate("auto_gf_AutoClicker_TriggerFunc");
    }

    TriggerExecute(auto_gf_AutoClicker_Trigger, false, false);
}

bool auto_gf_AutoClicker_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_gf_AutoClicker_lp_player;

    // Automatic Variable Declarations
    // Implementation
    while (gv_autoClicking[lp_player]) {
            UnitIssueOrder(gv_playerCharacter[lp_player], OrderTargetingPoint(AbilityCommand("move", 0), gv_mouseLocale[lp_player]), c_orderQueueReplace);
            Wait(0.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
// Trigger: Example LVL 5 Trigger
//--------------------------------------------------------------------------------------------------
bool gt_ExampleLVL5Trigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int[2] lv_pointVar;
    fixed lv_angle;

    // Automatic Variable Declarations
    const int auto00F88BF3_ae = 20;
    const int auto00F88BF3_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_i = 1;
        for ( ; ( (auto00F88BF3_ai >= 0 && lv_i <= auto00F88BF3_ae) || (auto00F88BF3_ai < 0 && lv_i >= auto00F88BF3_ae) ) ; lv_i += auto00F88BF3_ai ) {
            gf_WheelOfDoom(5, 0.0, 1, 4.0, PointFromId(1211802061), 0.0, 6.0, 100.0, 100.0, 6.5, lv_pointVar[0], lv_pointVar[1], 2.5, 10.4, "255,128,128");
            gf_MovePointStraight(PointWithOffsetPolar(gv_pointBank[lv_pointVar[0]][lv_pointVar[1]], 80.0, lv_angle), 0.75, 100.0, 18, lv_pointVar[0], lv_pointVar[1]);
            lv_pointVar[1] = lv_i;
            Wait(1.0, c_timeGame);
            lv_angle += 40.0;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ExampleLVL5Trigger_Init () {
    gt_ExampleLVL5Trigger = TriggerCreate("gt_ExampleLVL5Trigger_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Classic Normal
//--------------------------------------------------------------------------------------------------
bool gt_ClassicNormal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6846E021_ae = 14;
    const int auto6846E021_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_level == 1)) {
        gf_SpawnGrey(10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 0.8, 1.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 2)) {
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gv_thread = 1;
        gv_chase = true;
        gf_SpawnGrey(10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 1.2, 1.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 3)) {
        gv_thread = 2;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gv_redRegion[0] = RegionFromId(44);
        gf_ResetChaser();
        gv_chase = false;
        gf_PointToDistanceBlue(7.0, 0.0, 0.0, 5.5, 1.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, true, false, "102,102,255", 2, 10.0);
    }
    else if ((gv_level == 4)) {
        gv_thread = 3;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        spawnRed(65, 8.0, 1.0, 1.5, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
    }
    else if ((gv_level == 5)) {
        gv_thread = 4;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 2.0, 1.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_SpawnGrey(4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 6)) {
        gv_thread = 5;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_PointToDistanceBlue(7.0, 0.0, 0.0, 6.5, 2.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, false, false, "102,102,255", 5, 10.0);
    }
    else if ((gv_level == 7)) {
        gv_thread = 6;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_PointToDistanceBlue(4.0, 15.0, 0.0, 6.5, 2.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, true, false, "102,102,255", 6, 10.0);
    }
    else if ((gv_level == 8)) {
        gv_thread = 7;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        spawnRed(40, 10.0, 2.0, 2.0, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 9)) {
        gv_thread = 8;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_PointToDistanceBlue(4.0, 15.0, 0.0, 6.5, 2.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, false, false, "102,102,255", 8, 10.0);
        spawnRed(40, 10.0, 2.0, 2.0, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 10)) {
        lv_i = 1;
        for ( ; ( (auto6846E021_ai >= 0 && lv_i <= auto6846E021_ae) || (auto6846E021_ai < 0 && lv_i >= auto6846E021_ae) ) ; lv_i += auto6846E021_ai ) {
            GameOver(lv_i, c_gameOverVictory, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicNormal_Init () {
    gt_ClassicNormal = TriggerCreate("gt_ClassicNormal_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Classic Hard
//--------------------------------------------------------------------------------------------------
bool gt_ClassicHard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int autoD7D26F88_ae = 14;
    const int autoD7D26F88_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((gv_level == 1)) {
        gv_chase = true;
        gf_SpawnGrey(10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 1.2, 1.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 2)) {
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gv_thread = 1;
        gf_ResetChaser();
        gf_PointToDistanceBlue(7.0, 0.0, 0.0, 5.5, 1.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, true, false, "102,102,255", 1, 10.0);
        gf_SpawnGrey(10, 10, 10, 10, 9, 9, 9, 9, 8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 1.2, 1.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
    }
    else if ((gv_level == 3)) {
        gv_thread = 2;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gv_redRegion[0] = RegionFromId(44);
        gf_ResetChaser();
        gf_PointToDistanceBlue(7.0, 0.0, 0.0, 5.5, 1.0, 75.0, 0.0, 1, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, true, false, "102,102,255", 2, 10.0);
        spawnRed(75, 8.0, 1.0, 1.5, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
    }
    else if ((gv_level == 4)) {
        gv_thread = 3;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_PointToDistanceBlue(0.15, 0.0, 0.0, 8.0, 2.2, 75.0, 0.0, 30, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, false, false, "102,102,255", 3, 10.0);
    }
    else if ((gv_level == 5)) {
        gv_thread = 4;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_ResetChaser();
        gv_chase = false;
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        spawnRed(60, 10.0, 2.0, 1.5, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
    }
    else if ((gv_level == 6)) {
        gv_thread = 5;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 2.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_TraditionalYellow(0.15, 30, 2.0, PointFromId(1211802061), 0.0, 12.0, "200,200,0", 25, 5, 1.5, 5.0, 9.0, 75.0, 0.0, 50.0, 10.0, 0.0, false, false);
    }
    else if ((gv_level == 7)) {
        gv_thread = 6;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 3.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_ZigZag(1, 5.5, 0.0, 0.0, PointFromId(1211802061), 2.0, 0.0, false, 0.0, 0.0, 6, "255,153,51", 0.0, 10.0, 7.5, true, 12.0, 110.0, 0.7);
    }
    else if ((gv_level == 8)) {
        gv_thread = 7;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        spawnRed(40, 10.0, 2.0, 2.0, "255,100,100", RegionFromId(44), gv_redGroup[0], "RedDroneOne", 10.0, false, 0.0, 0.0, 0.0, "255,102,153");
        gf_ZigZag(1, 5.5, 0.0, -15.0, PointFromId(1211802061), 2.0, 0.0, false, 0.0, 0.0, 7, "255,153,51", 0.0, 10.0, 6.0, false, 12.0, 110.0, 0.7);
    }
    else if ((gv_level == 9)) {
        gv_thread = 8;
        TriggerExecute(gt_RemoveRedSilver, true, false);
        gf_SpawnGrey(8, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 3.0, 2.0, "200,200,200", true, false, 0.0, "255,102,153", 0.0, 0.0);
        gf_TraditionalYellow(0.15, 30, 2.0, PointFromId(1211802061), 0.0, 12.0, "200,200,0", 25, 8, 1.5, 5.0, 8.0, 75.0, 0.0, 50.0, 10.0, 0.0, false, false);
        gf_PointToDistanceBlue(3.0, 12.0, 0.0, 8.0, 2.0, 75.0, 0.0, 2, 1, 0.0, PointFromId(1211802061), 0.0, 0.0, 0.0, 0.0, 0.0, false, false, "102,102,255", 8, 10.0);
    }
    else if ((gv_level == 10)) {
        lv_i = 1;
        for ( ; ( (autoD7D26F88_ai >= 0 && lv_i <= autoD7D26F88_ae) || (autoD7D26F88_ai < 0 && lv_i >= autoD7D26F88_ae) ) ; lv_i += autoD7D26F88_ai ) {
            GameOver(lv_i, c_gameOverVictory, true, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicHard_Init () {
    gt_ClassicHard = TriggerCreate("gt_ClassicHard_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Classic Insane
//--------------------------------------------------------------------------------------------------
bool gt_ClassicInsane_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ClassicInsane_Init () {
    gt_ClassicInsane = TriggerCreate("gt_ClassicInsane_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_pointy;
    color lv_woof;
    int lv_i;

    // Automatic Variable Declarations
    const int auto42565CA6_ae = 14;
    const int auto42565CA6_ai = 1;

    // Variable Initialization
    lv_woof = Color(50.20, 100.00, 100.00);
    lv_i = 1;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Zergling");
    gv_charSelectButtons[0].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Zergling/NormalImage");
    gv_charSelectButtons[0].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Zergling/HoverImage");
    gv_charSelectButtons[0].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Zergling/Label");
    gv_charSelectButtons[0].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Hydralisk");
    gv_charSelectButtons[1].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Hydralisk/NormalImage");
    gv_charSelectButtons[1].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Hydralisk/HoverImage");
    gv_charSelectButtons[1].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Hydralisk/Label");
    gv_charSelectButtons[1].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Baneling");
    gv_charSelectButtons[2].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Baneling/NormalImage");
    gv_charSelectButtons[2].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Baneling/HoverImage");
    gv_charSelectButtons[2].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Baneling/Label");
    gv_charSelectButtons[2].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Ultralisk");
    gv_charSelectButtons[3].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Ultralisk/NormalImage");
    gv_charSelectButtons[3].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Ultralisk/HoverImage");
    gv_charSelectButtons[3].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Ultralisk/Label");
    gv_charSelectButtons[3].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Lurker");
    gv_charSelectButtons[4].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Lurker/NormalImage");
    gv_charSelectButtons[4].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Lurker/HoverImage");
    gv_charSelectButtons[4].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Lurker/Label");
    gv_charSelectButtons[4].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Roach");
    gv_charSelectButtons[5].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Roach/NormalImage");
    gv_charSelectButtons[5].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Roach/HoverImage");
    gv_charSelectButtons[5].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Roach/Label");
    gv_charSelectButtons[5].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Infested");
    gv_charSelectButtons[6].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Infested/NormalImage");
    gv_charSelectButtons[6].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Infested/HoverImage");
    gv_charSelectButtons[6].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Infested/Label");
    gv_charSelectButtons[6].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/CharSelectFrame/Drone");
    gv_charSelectButtons[7].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Drone/NormalImage");
    gv_charSelectButtons[7].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/CharSelectFrame/Drone/HoverImage");
    gv_charSelectButtons[7].lv_hoverImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/CharSelectFrame/Drone/Label");
    gv_charSelectButtons[7].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/GameTypeFrame/TypeOne");
    gv_gameTypeButtons[0].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/GameTypeFrame/TypeOne/NormalImage");
    gv_gameTypeButtons[0].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/GameTypeFrame/TypeOne/Label");
    gv_gameTypeButtons[0].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/GameTypeFrame/TypeTwo");
    gv_gameTypeButtons[1].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/GameTypeFrame/TypeTwo/NormalImage");
    gv_gameTypeButtons[1].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/GameTypeFrame/TypeTwo/Label");
    gv_gameTypeButtons[1].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/GameTypeFrame/TypeThree");
    gv_gameTypeButtons[2].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/GameTypeFrame/TypeThree/NormalImage");
    gv_gameTypeButtons[2].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/GameTypeFrame/TypeThree/Label");
    gv_gameTypeButtons[2].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/One");
    gv_gameDiffButtons[0].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/One/NormalImage");
    gv_gameDiffButtons[0].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/One/Label");
    gv_gameDiffButtons[0].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Two");
    gv_gameDiffButtons[1].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Two/NormalImage");
    gv_gameDiffButtons[1].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Two/Label");
    gv_gameDiffButtons[1].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Three");
    gv_gameDiffButtons[2].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Three/NormalImage");
    gv_gameDiffButtons[2].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs/Three/Label");
    gv_gameDiffButtons[2].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/One");
    gv_gameDiffButtons[3].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/One/NormalImage");
    gv_gameDiffButtons[3].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/One/Label");
    gv_gameDiffButtons[3].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Two");
    gv_gameDiffButtons[4].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Two/NormalImage");
    gv_gameDiffButtons[4].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Two/Label");
    gv_gameDiffButtons[4].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Three");
    gv_gameDiffButtons[5].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Three/NormalImage");
    gv_gameDiffButtons[5].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/Three/Label");
    gv_gameDiffButtons[5].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeThreeDiffs/One");
    gv_gameDiffButtons[6].lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs/One/NormalImage");
    gv_gameDiffButtons[6].lv_normalImage = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeThreeDiffs/One/Label");
    gv_gameDiffButtons[6].lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeOneDiffs");
    gv_gameDiffFrame[0] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeTwoDiffs");
    gv_gameDiffFrame[1] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame/DifficultySelectFrame/TypeThreeDiffs");
    gv_gameDiffFrame[2] = DialogControlLastCreated();
    DialogControlSetVisible(gv_gameDiffFrame[0], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gameDiffFrame[1], PlayerGroupAll(), false);
    DialogControlSetVisible(gv_gameDiffFrame[2], PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame");
    gv_openingMenu = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ContainerFrame/Ready/Button");
    gv_readyButton.lv_dialog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/Ready/Button/Label");
    gv_readyButton.lv_label = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/Timer/Label");
    gv_timer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ChatBox2000");
    gv_chatBox.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ChatBox2000/Close");
    gv_chatBox.lv_closeButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ChatBox2000/Chat/Log");
    gv_chatBox.lv_chatLog = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ChatBox2000/Chat");
    gv_chatBox.lv_chatPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ChatBox2000/Hide");
    gv_chatBox.lv_toggleVisibility = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ChatBox2000/Fade");
    gv_chatBox.lv_toggleFade = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatDisplay");
    gv_nativeChat = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ChatBar");
    gv_chatEditBox = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ContainerFrame/Ready");
    gv_delete = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/Settings");
    gv_cam.lv_mainFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeSlider, "UIContainer/Settings/CamDistanceSlider");
    gv_cam.lv_distanceSlider = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, "UIContainer/ContainerFrame/StatsSheet/SoloTotal");
    gv_graph[1] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, "UIContainer/ContainerFrame/StatsSheet/SoloWinrate");
    gv_graph[2] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, "UIContainer/ContainerFrame/StatsSheet/TeamTotal");
    gv_graph[3] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeGraphFrame, "UIContainer/ContainerFrame/StatsSheet/TeamWinrate");
    gv_graph[4] = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Creator");
    gv_stats.lv_creator = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Difficulty");
    gv_stats.lv_difficulty = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/XPMult");
    gv_stats.lv_xPMult = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/WinningXP");
    gv_stats.lv_winningXP = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Levels");
    gv_stats.lv_levels = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Bosses");
    gv_stats.lv_bosses = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Achievements");
    gv_stats.lv_achievements = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Deaths");
    gv_stats.lv_deaths = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Saves");
    gv_stats.lv_saves = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/XP");
    gv_stats.lv_xP = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/XPGame");
    gv_stats.lv_xPGame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/STime");
    gv_stats.lv_sTime = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/TTime");
    gv_stats.lv_tTime = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Games");
    gv_stats.lv_games = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Wins");
    gv_stats.lv_wins = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/Losses");
    gv_stats.lv_losses = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/ContainerFrame/StatsSheet/WinPC");
    gv_stats.lv_winPC = DialogControlLastCreated();
    gv_classicHard.lv_creator = "FireFly";
    gv_classicHard.lv_difficulty = 4;
    gv_classicHard.lv_xPMult = 2.0;
    gv_classicHard.lv_winningXP = 2000;
    gv_classicHard.lv_levels = 9;
    gv_classicHard.lv_bosses = 3;
    gv_classicHard.lv_achievements = 0;
    gv_classicNormal.lv_creator = "FireFly";
    gv_classicNormal.lv_difficulty = 2;
    gv_classicNormal.lv_xPMult = 1.0;
    gv_classicNormal.lv_winningXP = 500;
    gv_classicNormal.lv_levels = 9;
    gv_classicNormal.lv_bosses = 3;
    gv_classicNormal.lv_achievements = 0;
    gv_classicInsane.lv_creator = "FireFly";
    gv_classicInsane.lv_difficulty = 6;
    gv_classicInsane.lv_xPMult = 4.0;
    gv_classicInsane.lv_winningXP = 8000;
    gv_classicInsane.lv_levels = 9;
    gv_classicInsane.lv_bosses = 3;
    gv_classicInsane.lv_achievements = 0;
    lv_i = 1;
    for ( ; ( (auto42565CA6_ai >= 0 && lv_i <= auto42565CA6_ae) || (auto42565CA6_ai < 0 && lv_i >= auto42565CA6_ae) ) ; lv_i += auto42565CA6_ai ) {
        VisSetFoWAlpha(lv_i, 100.0);
        CameraLockInput(lv_i, true);
        gv_visibility[lv_i] = false;
        gv_camera[lv_i] = CameraInfoFromId(1623587201);
    }
    gv_allPlayers = PlayerGroupActive();
    if ((PlayerGroupCount(gv_allPlayers) == 1)) {
        gv_solo = true;
    }

    CameraApplyInfo(1, CameraInfoFromId(1623587201), 0.0, -1, 10.0, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    DialogControlSetVisible(gv_openingMenu, PlayerGroupAll(), true);
    DialogControlSetEnabled(gv_gameDiffButtons[3].lv_dialog, gv_allPlayers, false);
    DialogControlSetEnabled(gv_gameDiffButtons[4].lv_dialog, gv_allPlayers, false);
    DialogControlSetEnabled(gv_gameDiffButtons[5].lv_dialog, gv_allPlayers, false);
    DialogControlSetEnabled(gv_gameDiffButtons[6].lv_dialog, gv_allPlayers, false);
    lv_i = 1;
    for (; lv_i <= PlayerGroupCount(gv_allPlayers); lv_i+=1) {
        gv_rezZone[lv_i] = RegionCircle(PointFromName("NoGoPoint"), 2);
    }
    DialogControlSendAnimationEvent(gv_chatBox.lv_toggleVisibility, PlayerGroupAll(), "Invisible");
    BankLoad("RUNLINGRUNIUU0m", 1);
    BankValueSetFromInt(BankLastCreated(), "sdfd", "sad", 0);
    gv_chaserAttributes[1].lv_size = 1.0;
    gv_chaserAttributes[1].lv_speed = 5.0;
    gv_droneSizeArray[0] = 2.0;
    gv_chaserRegions[0] = RegionFromId(3);
    gv_chaserDestroyRegions[0] = RegionFromId(9);
    gv_chaserRegions[1] = RegionFromId(10);
    gv_chaserDestroyRegions[1] = RegionFromId(11);
    gv_chaserRegions[2] = RegionFromId(12);
    gv_chaserDestroyRegions[2] = RegionFromId(13);
    gv_chaserPoints[0] = PointFromId(1394817962);
    gv_chaserPoints[1] = PointFromId(1075426566);
    gv_chaserPoints[2] = PointFromId(1169434643);
    MenuTimer(1000);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: KeyPressed
//--------------------------------------------------------------------------------------------------
bool gt_KeyPressed_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventKeyPressed() == c_keyEnter)) {
        DialogControlSetVisible(gv_chatBox.lv_mainPanel, PlayerGroupSingle(EventPlayer()), true);
        if ((gv_fade[EventPlayer()] == 2)) {
            DialogControlSetVisible(gv_nativeChat, PlayerGroupSingle(EventPlayer()), true);
        }

    }
    else if (((EventKeyPressed() == c_keyE) && (DialogControlIsVisible(gv_openingMenu, EventPlayer()) == false))) {
        if ((gv_cam.lv_isVisible[EventPlayer()] == false)) {
            DialogControlSetVisible(gv_cam.lv_mainFrame, PlayerGroupSingle(EventPlayer()), true);
            gv_cam.lv_isVisible[EventPlayer()] = true;
        }
        else {
            DialogControlSetVisible(gv_cam.lv_mainFrame, PlayerGroupSingle(EventPlayer()), false);
            gv_cam.lv_isVisible[EventPlayer()] = false;
        }
    }
    else if ((EventKeyPressed() == c_keyC)) {
        if ((gv_autoClicking[EventPlayer()] == true) && (gv_autoClickAtLvlStart[EventPlayer()] == false)) {
            gv_autoClicking[EventPlayer()] = false;
        }
        else if ((gv_autoClickDisable == false) && (gv_autoClickAtLvlStart[EventPlayer()] == false)) {
            gv_autoClicking[EventPlayer()] = true;
            gf_AutoClicker(EventPlayer());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_KeyPressed_Init () {
    gt_KeyPressed = TriggerCreate("gt_KeyPressed_Func");
    TriggerAddEventKeyPressed(gt_KeyPressed, c_playerAny, c_keyNone, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: GreyMovement
//--------------------------------------------------------------------------------------------------
bool gt_GreyMovement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto254CBA5F_g;
    int auto254CBA5F_u;
    unit auto254CBA5F_var;
    unitgroup auto44924439_g;
    int auto44924439_u;
    unit auto44924439_var;
    unitgroup auto65161308_g;
    int auto65161308_u;
    unit auto65161308_var;

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        Wait(0.0, c_timeGame);
        auto254CBA5F_g = gv_greyDrones;
        auto254CBA5F_u = UnitGroupCount(auto254CBA5F_g, c_unitCountAll);
        for (;; auto254CBA5F_u -= 1) {
            auto254CBA5F_var = UnitGroupUnitFromEnd(auto254CBA5F_g, auto254CBA5F_u);
            if (auto254CBA5F_var == null) { break; }
            UnitSetPosition(auto254CBA5F_var, PointWithOffsetPolar(UnitGetPosition(auto254CBA5F_var), (UnitGetPropertyFixed(auto254CBA5F_var, c_unitPropMovementSpeed, c_unitPropCurrent) / 20.0), UnitGetFacing(auto254CBA5F_var)), true);
        }
        auto44924439_g = gv_purpleDrones;
        auto44924439_u = UnitGroupCount(auto44924439_g, c_unitCountAll);
        for (;; auto44924439_u -= 1) {
            auto44924439_var = UnitGroupUnitFromEnd(auto44924439_g, auto44924439_u);
            if (auto44924439_var == null) { break; }
            UnitSetPosition(auto44924439_var, PointWithOffsetPolar(UnitGetPosition(auto44924439_var), (UnitGetPropertyFixed(auto44924439_var, c_unitPropMovementSpeed, c_unitPropCurrent) / 20.0), UnitGetFacing(auto44924439_var)), true);
        }
        auto65161308_g = gv_zigZags;
        auto65161308_u = UnitGroupCount(auto65161308_g, c_unitCountAll);
        for (;; auto65161308_u -= 1) {
            auto65161308_var = UnitGroupUnitFromEnd(auto65161308_g, auto65161308_u);
            if (auto65161308_var == null) { break; }
            UnitSetPosition(auto65161308_var, PointWithOffsetPolar(UnitGetPosition(auto65161308_var), (UnitGetPropertyFixed(auto65161308_var, c_unitPropMovementSpeed, c_unitPropCurrent) / 20.0), UnitGetFacing(auto65161308_var)), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_GreyMovement_Init () {
    gt_GreyMovement = TriggerCreate("gt_GreyMovement_Func");
    TriggerAddEventMapInit(gt_GreyMovement);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIdleDrones
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIdleDrones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_dronesToBeRemovedIfIdle, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIdleDrones_Init () {
    gt_RemoveIdleDrones = TriggerCreate("gt_RemoveIdleDrones_Func");
    TriggerAddEventUnitBecomesIdle(gt_RemoveIdleDrones, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveRed/Silver
//--------------------------------------------------------------------------------------------------
bool gt_RemoveRedSilver_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto898DB02D_g;
    int auto898DB02D_u;
    unit auto898DB02D_var;
    unitgroup autoE6BC4AA8_g;
    int autoE6BC4AA8_u;
    unit autoE6BC4AA8_var;
    unitgroup auto8B01F6A7_g;
    int auto8B01F6A7_u;
    unit auto8B01F6A7_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto898DB02D_g = gv_redDrones;
    auto898DB02D_u = UnitGroupCount(auto898DB02D_g, c_unitCountAll);
    for (;; auto898DB02D_u -= 1) {
        auto898DB02D_var = UnitGroupUnitFromEnd(auto898DB02D_g, auto898DB02D_u);
        if (auto898DB02D_var == null) { break; }
        UnitRemove(auto898DB02D_var);
    }
    autoE6BC4AA8_g = gv_greyDrones;
    autoE6BC4AA8_u = UnitGroupCount(autoE6BC4AA8_g, c_unitCountAll);
    for (;; autoE6BC4AA8_u -= 1) {
        autoE6BC4AA8_var = UnitGroupUnitFromEnd(autoE6BC4AA8_g, autoE6BC4AA8_u);
        if (autoE6BC4AA8_var == null) { break; }
        UnitRemove(autoE6BC4AA8_var);
    }
    auto8B01F6A7_g = gv_purpleDrones;
    auto8B01F6A7_u = UnitGroupCount(auto8B01F6A7_g, c_unitCountAll);
    for (;; auto8B01F6A7_u -= 1) {
        auto8B01F6A7_var = UnitGroupUnitFromEnd(auto8B01F6A7_g, auto8B01F6A7_u);
        if (auto8B01F6A7_var == null) { break; }
        UnitRemove(auto8B01F6A7_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveRedSilver_Init () {
    gt_RemoveRedSilver = TriggerCreate("gt_RemoveRedSilver_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: IdleMoveAgain
//--------------------------------------------------------------------------------------------------
bool gt_IdleMoveAgain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_dronesToMoveIfIdle, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(gv_redGroup[0], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_redRegion[0])), c_orderQueueReplace);
    }
    else if ((UnitGroupHasUnit(gv_redGroup[1], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_redRegion[1])), c_orderQueueReplace);
    }
    else if ((UnitGroupHasUnit(gv_redGroup[2], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_redRegion[2])), c_orderQueueReplace);
    }
    else if ((UnitGroupHasUnit(gv_redGroup[3], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_redRegion[3])), c_orderQueueReplace);
    }
    else if ((UnitGroupHasUnit(gv_redGroup[4], EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(gv_redRegion[4])), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IdleMoveAgain_Init () {
    gt_IdleMoveAgain = TriggerCreate("gt_IdleMoveAgain_Func");
    TriggerAddEventUnitBecomesIdle(gt_IdleMoveAgain, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_ExampleLVL5Trigger_Init();
    gt_ClassicNormal_Init();
    gt_ClassicHard_Init();
    gt_ClassicInsane_Init();
    gt_Initialization_Init();
    gt_KeyPressed_Init();
    gt_GreyMovement_Init();
    gt_RemoveIdleDrones_Init();
    gt_RemoveRedSilver_Init();
    gt_IdleMoveAgain_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
