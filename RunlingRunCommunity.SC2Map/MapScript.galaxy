//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Just Another StarCraft II Map
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
int gv_thread;
fixed gv_greyDroneSpeed;
unitgroup gv_greyDrones;
unitgroup gv_redDrones;
unitgroup gv_dronesToBeRemovedIfIdle;
unitgroup gv_dronesToMoveIfIdle;

void InitGlobals () {
    gv_greyDrones = UnitGroupEmpty();
    gv_redDrones = UnitGroupEmpty();
    gv_dronesToBeRemovedIfIdle = UnitGroupEmpty();
    gv_dronesToMoveIfIdle = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_SpawnGrey (int lp__1, int lp__2, int lp__3, int lp__4, int lp__5, int lp__6, int lp__7, int lp__8, int lp__9, int lp__10, int lp__11, int lp__12, int lp__13, int lp__14, int lp__15, int lp__16, int lp__17, int lp__18, int lp__19, fixed lp_droneSpeed);
void gf_SpawnGreySingleLane (region lp_lane, int lp_numOfDrones, fixed lp_droneSpeed);
void gf_PointToPointBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, int lp_numOfDroneSpawned, point lp_originPoint, point lp_destinationPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_initialAngleLinetrueonly, fixed lp_changeInAngleLinetrueonly, fixed lp_droneSpacingLinetrueonly, fixed lp_originOffsetLinetrueonly, bool lp_randomLineAngleLinetrueonly, int lp_threadlocal);
void gf_PointToRegionBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, int lp_numOfDronesSpawned, point lp_originPoint, region lp_destinationRegion, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_initialAngle, fixed lp_changeInAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAngleRandom, int lp_threadlocal);
void gf_PointToDistanceBlue (fixed lp_droneSpawnFrequency, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, fixed lp_arcLengthInDegrees, int lp_numOfDronesSpawned, point lp_originPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_lineDroneOriginOffset, fixed lp_lineDroneSpacing, fixed lp_lineAngle, fixed lp_lineChangeInAngle, bool lp_lineAnglesRandom, int lp_threadlocal);
void gf_RegionToPointBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, int lp_numOfDronesSpawned, region lp_originRegion, point lp_destinationPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAnglesRandom, int lp_threadlocal);
void gf_RegionToRegionBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, int lp_numOfDronesSpawned, region lp_originRegion, region lp_destinationRegion, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAngleRandom, int lp_threadlocal);
void gf_RegionToDistanceBlue (fixed lp_frequency, fixed lp_speed, fixed lp_distance, int lp_num, region lp_originRegion, fixed lp_initialDelay, int lp_threadlocal);
void gf_RegionToDistanceWallBlue (fixed lp_frequency, fixed lp_delta, fixed lp_theta, fixed lp_speed, int lp_num, fixed lp_initialDelay, region lp_originRegion, fixed lp_wallDroneSpacing, int lp_threadlocal, fixed lp_initialDistance, fixed lp_distance, fixed lp_wallMovementDirection, bool lp_random);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Initialization;
trigger gt_IdleMoveAgain;
trigger gt_RemoveIdleDrones;

//--------------------------------------------------------------------------------------------------
// Custom Script: IncludeMain()
//--------------------------------------------------------------------------------------------------
include "scripts/main"

//--------------------------------------------------------------------------------------------------
// Custom Script Initialization
//--------------------------------------------------------------------------------------------------
void InitCustomScript () {
    main();
}

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_SpawnGrey (int lp__1, int lp__2, int lp__3, int lp__4, int lp__5, int lp__6, int lp__7, int lp__8, int lp__9, int lp__10, int lp__11, int lp__12, int lp__13, int lp__14, int lp__15, int lp__16, int lp__17, int lp__18, int lp__19, fixed lp_droneSpeed) {
    // Variable Declarations
    int lv_iter;
    int lv_iter2;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_SpawnGreySingleLane(RegionFromId(7), lp__1, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(8), lp__2, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(9), lp__3, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(10), lp__4, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(11), lp__5, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(12), lp__6, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(13), lp__7, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(14), lp__8, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(15), lp__9, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(16), lp__10, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(17), lp__11, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(18), lp__12, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(19), lp__13, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(20), lp__14, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(21), lp__15, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(22), lp__16, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(23), lp__17, lp_droneSpeed);
    gf_SpawnGreySingleLane(RegionFromId(24), lp__18, lp_droneSpeed);
}

void gf_SpawnGreySingleLane (region lp_lane, int lp_numOfDrones, fixed lp_droneSpeed) {
    // Variable Declarations
    int lv_iter;
    int lv_movement;

    // Automatic Variable Declarations
    int auto8BB9E948_ae;
    const int auto8BB9E948_ai = 1;
    const int autoC26C9E04_ae = 5;
    const int autoC26C9E04_ai = 1;

    // Variable Initialization

    // Implementation
    gv_greyDroneSpeed = lp_droneSpeed;
    auto8BB9E948_ae = lp_numOfDrones;
    lv_iter = 1;
    for ( ; ( (auto8BB9E948_ai >= 0 && lv_iter <= auto8BB9E948_ae) || (auto8BB9E948_ai < 0 && lv_iter >= auto8BB9E948_ae) ) ; lv_iter += auto8BB9E948_ai ) {
        UnitCreate(1, "PointDefenseDrone", 0, 15, RegionRandomPoint(lp_lane), libNtve_gf_RandomAngle());
        UnitGroupAdd(gv_greyDrones, UnitLastCreated());
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
        UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
        lv_movement = 1;
        for ( ; ( (autoC26C9E04_ai >= 0 && lv_movement <= autoC26C9E04_ae) || (autoC26C9E04_ai < 0 && lv_movement >= autoC26C9E04_ae) ) ; lv_movement += autoC26C9E04_ai ) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), (lv_movement * 25.0), UnitGetFacing(UnitLastCreated()))), c_orderQueueAddToEnd);
        }
    }
}

trigger auto_gf_PointToPointBlue_Trigger = null;
fixed auto_gf_PointToPointBlue_lp_droneSpawnFrequency;
fixed auto_gf_PointToPointBlue_lp_droneSpeed;
fixed auto_gf_PointToPointBlue_lp_distanceDroneTravels;
int auto_gf_PointToPointBlue_lp_numOfDroneSpawned;
point auto_gf_PointToPointBlue_lp_originPoint;
point auto_gf_PointToPointBlue_lp_destinationPoint;
fixed auto_gf_PointToPointBlue_lp_initialDelay;
bool auto_gf_PointToPointBlue_lp_droneSpawnInLine;
fixed auto_gf_PointToPointBlue_lp_initialAngleLinetrueonly;
fixed auto_gf_PointToPointBlue_lp_changeInAngleLinetrueonly;
fixed auto_gf_PointToPointBlue_lp_droneSpacingLinetrueonly;
fixed auto_gf_PointToPointBlue_lp_originOffsetLinetrueonly;
bool auto_gf_PointToPointBlue_lp_randomLineAngleLinetrueonly;
int auto_gf_PointToPointBlue_lp_threadlocal;

void gf_PointToPointBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, int lp_numOfDroneSpawned, point lp_originPoint, point lp_destinationPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_initialAngleLinetrueonly, fixed lp_changeInAngleLinetrueonly, fixed lp_droneSpacingLinetrueonly, fixed lp_originOffsetLinetrueonly, bool lp_randomLineAngleLinetrueonly, int lp_threadlocal) {
    auto_gf_PointToPointBlue_lp_droneSpawnFrequency = lp_droneSpawnFrequency;
    auto_gf_PointToPointBlue_lp_droneSpeed = lp_droneSpeed;
    auto_gf_PointToPointBlue_lp_distanceDroneTravels = lp_distanceDroneTravels;
    auto_gf_PointToPointBlue_lp_numOfDroneSpawned = lp_numOfDroneSpawned;
    auto_gf_PointToPointBlue_lp_originPoint = lp_originPoint;
    auto_gf_PointToPointBlue_lp_destinationPoint = lp_destinationPoint;
    auto_gf_PointToPointBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_PointToPointBlue_lp_droneSpawnInLine = lp_droneSpawnInLine;
    auto_gf_PointToPointBlue_lp_initialAngleLinetrueonly = lp_initialAngleLinetrueonly;
    auto_gf_PointToPointBlue_lp_changeInAngleLinetrueonly = lp_changeInAngleLinetrueonly;
    auto_gf_PointToPointBlue_lp_droneSpacingLinetrueonly = lp_droneSpacingLinetrueonly;
    auto_gf_PointToPointBlue_lp_originOffsetLinetrueonly = lp_originOffsetLinetrueonly;
    auto_gf_PointToPointBlue_lp_randomLineAngleLinetrueonly = lp_randomLineAngleLinetrueonly;
    auto_gf_PointToPointBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_PointToPointBlue_Trigger == null) {
        auto_gf_PointToPointBlue_Trigger = TriggerCreate("auto_gf_PointToPointBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_PointToPointBlue_Trigger, false, false);
}

bool auto_gf_PointToPointBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_droneSpawnFrequency = auto_gf_PointToPointBlue_lp_droneSpawnFrequency;
    fixed lp_droneSpeed = auto_gf_PointToPointBlue_lp_droneSpeed;
    fixed lp_distanceDroneTravels = auto_gf_PointToPointBlue_lp_distanceDroneTravels;
    int lp_numOfDroneSpawned = auto_gf_PointToPointBlue_lp_numOfDroneSpawned;
    point lp_originPoint = auto_gf_PointToPointBlue_lp_originPoint;
    point lp_destinationPoint = auto_gf_PointToPointBlue_lp_destinationPoint;
    fixed lp_initialDelay = auto_gf_PointToPointBlue_lp_initialDelay;
    bool lp_droneSpawnInLine = auto_gf_PointToPointBlue_lp_droneSpawnInLine;
    fixed lp_initialAngleLinetrueonly = auto_gf_PointToPointBlue_lp_initialAngleLinetrueonly;
    fixed lp_changeInAngleLinetrueonly = auto_gf_PointToPointBlue_lp_changeInAngleLinetrueonly;
    fixed lp_droneSpacingLinetrueonly = auto_gf_PointToPointBlue_lp_droneSpacingLinetrueonly;
    fixed lp_originOffsetLinetrueonly = auto_gf_PointToPointBlue_lp_originOffsetLinetrueonly;
    bool lp_randomLineAngleLinetrueonly = auto_gf_PointToPointBlue_lp_randomLineAngleLinetrueonly;
    int lp_threadlocal = auto_gf_PointToPointBlue_lp_threadlocal;

    // Variable Declarations
    int lv_iter;
    fixed lv_wallDistancing;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto2A134207_ae;
    const int auto2A134207_ai = 1;
    int autoB49B91AA_ae;
    const int autoB49B91AA_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if ((lp_droneSpawnInLine == false)) {
        while ((gv_thread == lp_threadlocal)) {
            autoB49B91AA_ae = lp_numOfDroneSpawned;
            lv_iter = 1;
            for ( ; ( (autoB49B91AA_ai >= 0 && lv_iter <= autoB49B91AA_ae) || (autoB49B91AA_ai < 0 && lv_iter >= autoB49B91AA_ae) ) ; lv_iter += autoB49B91AA_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, lp_originPoint, 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_destinationPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lp_destinationPoint, 0.0);
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    else {
        if ((lp_randomLineAngleLinetrueonly == true)) {
            lv_angle = libNtve_gf_RandomAngle();
        }
        else {
            lv_angle = lp_initialAngleLinetrueonly;
        }
        while ((gv_thread == lp_threadlocal)) {
            lv_wallDistancing = 0.0;
            auto2A134207_ae = lp_numOfDroneSpawned;
            lv_iter = 1;
            for ( ; ( (auto2A134207_ai >= 0 && lv_iter <= auto2A134207_ae) || (auto2A134207_ai < 0 && lv_iter >= auto2A134207_ae) ) ; lv_iter += auto2A134207_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lp_originPoint, (lv_wallDistancing + lp_originOffsetLinetrueonly), lv_angle), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_destinationPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lp_destinationPoint, 0.0);
                lv_wallDistancing += lp_droneSpacingLinetrueonly;
            }
            if ((lp_randomLineAngleLinetrueonly == true)) {
                lv_angle = libNtve_gf_RandomAngle();
            }
            else {
                lv_angle += lp_changeInAngleLinetrueonly;
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_PointToRegionBlue_Trigger = null;
fixed auto_gf_PointToRegionBlue_lp_droneSpawnFrequency;
fixed auto_gf_PointToRegionBlue_lp_droneSpeed;
fixed auto_gf_PointToRegionBlue_lp_distanceDroneTravels;
int auto_gf_PointToRegionBlue_lp_numOfDronesSpawned;
point auto_gf_PointToRegionBlue_lp_originPoint;
region auto_gf_PointToRegionBlue_lp_destinationRegion;
fixed auto_gf_PointToRegionBlue_lp_initialDelay;
bool auto_gf_PointToRegionBlue_lp_droneSpawnInLine;
fixed auto_gf_PointToRegionBlue_lp_initialAngle;
fixed auto_gf_PointToRegionBlue_lp_changeInAngle;
fixed auto_gf_PointToRegionBlue_lp_lineDroneSpacing;
fixed auto_gf_PointToRegionBlue_lp_lineDroneOriginOffset;
bool auto_gf_PointToRegionBlue_lp_lineAngleRandom;
int auto_gf_PointToRegionBlue_lp_threadlocal;

void gf_PointToRegionBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, int lp_numOfDronesSpawned, point lp_originPoint, region lp_destinationRegion, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_initialAngle, fixed lp_changeInAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAngleRandom, int lp_threadlocal) {
    auto_gf_PointToRegionBlue_lp_droneSpawnFrequency = lp_droneSpawnFrequency;
    auto_gf_PointToRegionBlue_lp_droneSpeed = lp_droneSpeed;
    auto_gf_PointToRegionBlue_lp_distanceDroneTravels = lp_distanceDroneTravels;
    auto_gf_PointToRegionBlue_lp_numOfDronesSpawned = lp_numOfDronesSpawned;
    auto_gf_PointToRegionBlue_lp_originPoint = lp_originPoint;
    auto_gf_PointToRegionBlue_lp_destinationRegion = lp_destinationRegion;
    auto_gf_PointToRegionBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_PointToRegionBlue_lp_droneSpawnInLine = lp_droneSpawnInLine;
    auto_gf_PointToRegionBlue_lp_initialAngle = lp_initialAngle;
    auto_gf_PointToRegionBlue_lp_changeInAngle = lp_changeInAngle;
    auto_gf_PointToRegionBlue_lp_lineDroneSpacing = lp_lineDroneSpacing;
    auto_gf_PointToRegionBlue_lp_lineDroneOriginOffset = lp_lineDroneOriginOffset;
    auto_gf_PointToRegionBlue_lp_lineAngleRandom = lp_lineAngleRandom;
    auto_gf_PointToRegionBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_PointToRegionBlue_Trigger == null) {
        auto_gf_PointToRegionBlue_Trigger = TriggerCreate("auto_gf_PointToRegionBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_PointToRegionBlue_Trigger, false, false);
}

bool auto_gf_PointToRegionBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_droneSpawnFrequency = auto_gf_PointToRegionBlue_lp_droneSpawnFrequency;
    fixed lp_droneSpeed = auto_gf_PointToRegionBlue_lp_droneSpeed;
    fixed lp_distanceDroneTravels = auto_gf_PointToRegionBlue_lp_distanceDroneTravels;
    int lp_numOfDronesSpawned = auto_gf_PointToRegionBlue_lp_numOfDronesSpawned;
    point lp_originPoint = auto_gf_PointToRegionBlue_lp_originPoint;
    region lp_destinationRegion = auto_gf_PointToRegionBlue_lp_destinationRegion;
    fixed lp_initialDelay = auto_gf_PointToRegionBlue_lp_initialDelay;
    bool lp_droneSpawnInLine = auto_gf_PointToRegionBlue_lp_droneSpawnInLine;
    fixed lp_initialAngle = auto_gf_PointToRegionBlue_lp_initialAngle;
    fixed lp_changeInAngle = auto_gf_PointToRegionBlue_lp_changeInAngle;
    fixed lp_lineDroneSpacing = auto_gf_PointToRegionBlue_lp_lineDroneSpacing;
    fixed lp_lineDroneOriginOffset = auto_gf_PointToRegionBlue_lp_lineDroneOriginOffset;
    bool lp_lineAngleRandom = auto_gf_PointToRegionBlue_lp_lineAngleRandom;
    int lp_threadlocal = auto_gf_PointToRegionBlue_lp_threadlocal;

    // Variable Declarations
    int lv_iter;
    point lv_randomPoint;
    fixed lv_wallDistancing;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto95F5B406_ae;
    const int auto95F5B406_ai = 1;
    int autoF0D0FCC2_ae;
    const int autoF0D0FCC2_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if (true) {
        while ((gv_thread == lp_threadlocal)) {
            autoF0D0FCC2_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (autoF0D0FCC2_ai >= 0 && lv_iter <= autoF0D0FCC2_ae) || (autoF0D0FCC2_ai < 0 && lv_iter >= autoF0D0FCC2_ae) ) ; lv_iter += autoF0D0FCC2_ai ) {
                lv_randomPoint = RegionRandomPoint(lp_destinationRegion);
                UnitCreate(1, "PointDefenseDrone", 0, 15, lp_originPoint, 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_randomPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lv_randomPoint, 0.0);
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    else {
        if ((lp_lineAngleRandom == true)) {
            lv_angle = libNtve_gf_RandomAngle();
        }
        else {
            lv_angle = lp_initialAngle;
        }
        while ((gv_thread == lp_threadlocal)) {
            lv_wallDistancing = 0.0;
            auto95F5B406_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (auto95F5B406_ai >= 0 && lv_iter <= auto95F5B406_ae) || (auto95F5B406_ai < 0 && lv_iter >= auto95F5B406_ae) ) ; lv_iter += auto95F5B406_ai ) {
                lv_randomPoint = RegionRandomPoint(lp_destinationRegion);
                UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lp_originPoint, (lv_wallDistancing + lp_lineDroneOriginOffset), lv_angle), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_randomPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lv_randomPoint, 0.0);
                lv_wallDistancing += lp_lineDroneSpacing;
            }
            if ((lp_lineAngleRandom == true)) {
                lv_angle = libNtve_gf_RandomAngle();
            }
            else {
                lv_angle += lp_changeInAngle;
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_PointToDistanceBlue_Trigger = null;
fixed auto_gf_PointToDistanceBlue_lp_droneSpawnFrequency;
fixed auto_gf_PointToDistanceBlue_lp_changeInAngle;
fixed auto_gf_PointToDistanceBlue_lp_initialAngle;
fixed auto_gf_PointToDistanceBlue_lp_droneSpeed;
fixed auto_gf_PointToDistanceBlue_lp_distanceDroneTravels;
fixed auto_gf_PointToDistanceBlue_lp_arcLengthInDegrees;
int auto_gf_PointToDistanceBlue_lp_numOfDronesSpawned;
point auto_gf_PointToDistanceBlue_lp_originPoint;
fixed auto_gf_PointToDistanceBlue_lp_initialDelay;
bool auto_gf_PointToDistanceBlue_lp_droneSpawnInLine;
fixed auto_gf_PointToDistanceBlue_lp_lineDroneOriginOffset;
fixed auto_gf_PointToDistanceBlue_lp_lineDroneSpacing;
fixed auto_gf_PointToDistanceBlue_lp_lineAngle;
fixed auto_gf_PointToDistanceBlue_lp_lineChangeInAngle;
bool auto_gf_PointToDistanceBlue_lp_lineAnglesRandom;
int auto_gf_PointToDistanceBlue_lp_threadlocal;

void gf_PointToDistanceBlue (fixed lp_droneSpawnFrequency, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_droneSpeed, fixed lp_distanceDroneTravels, fixed lp_arcLengthInDegrees, int lp_numOfDronesSpawned, point lp_originPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_lineDroneOriginOffset, fixed lp_lineDroneSpacing, fixed lp_lineAngle, fixed lp_lineChangeInAngle, bool lp_lineAnglesRandom, int lp_threadlocal) {
    auto_gf_PointToDistanceBlue_lp_droneSpawnFrequency = lp_droneSpawnFrequency;
    auto_gf_PointToDistanceBlue_lp_changeInAngle = lp_changeInAngle;
    auto_gf_PointToDistanceBlue_lp_initialAngle = lp_initialAngle;
    auto_gf_PointToDistanceBlue_lp_droneSpeed = lp_droneSpeed;
    auto_gf_PointToDistanceBlue_lp_distanceDroneTravels = lp_distanceDroneTravels;
    auto_gf_PointToDistanceBlue_lp_arcLengthInDegrees = lp_arcLengthInDegrees;
    auto_gf_PointToDistanceBlue_lp_numOfDronesSpawned = lp_numOfDronesSpawned;
    auto_gf_PointToDistanceBlue_lp_originPoint = lp_originPoint;
    auto_gf_PointToDistanceBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_PointToDistanceBlue_lp_droneSpawnInLine = lp_droneSpawnInLine;
    auto_gf_PointToDistanceBlue_lp_lineDroneOriginOffset = lp_lineDroneOriginOffset;
    auto_gf_PointToDistanceBlue_lp_lineDroneSpacing = lp_lineDroneSpacing;
    auto_gf_PointToDistanceBlue_lp_lineAngle = lp_lineAngle;
    auto_gf_PointToDistanceBlue_lp_lineChangeInAngle = lp_lineChangeInAngle;
    auto_gf_PointToDistanceBlue_lp_lineAnglesRandom = lp_lineAnglesRandom;
    auto_gf_PointToDistanceBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_PointToDistanceBlue_Trigger == null) {
        auto_gf_PointToDistanceBlue_Trigger = TriggerCreate("auto_gf_PointToDistanceBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_PointToDistanceBlue_Trigger, false, false);
}

bool auto_gf_PointToDistanceBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_droneSpawnFrequency = auto_gf_PointToDistanceBlue_lp_droneSpawnFrequency;
    fixed lp_changeInAngle = auto_gf_PointToDistanceBlue_lp_changeInAngle;
    fixed lp_initialAngle = auto_gf_PointToDistanceBlue_lp_initialAngle;
    fixed lp_droneSpeed = auto_gf_PointToDistanceBlue_lp_droneSpeed;
    fixed lp_distanceDroneTravels = auto_gf_PointToDistanceBlue_lp_distanceDroneTravels;
    fixed lp_arcLengthInDegrees = auto_gf_PointToDistanceBlue_lp_arcLengthInDegrees;
    int lp_numOfDronesSpawned = auto_gf_PointToDistanceBlue_lp_numOfDronesSpawned;
    point lp_originPoint = auto_gf_PointToDistanceBlue_lp_originPoint;
    fixed lp_initialDelay = auto_gf_PointToDistanceBlue_lp_initialDelay;
    bool lp_droneSpawnInLine = auto_gf_PointToDistanceBlue_lp_droneSpawnInLine;
    fixed lp_lineDroneOriginOffset = auto_gf_PointToDistanceBlue_lp_lineDroneOriginOffset;
    fixed lp_lineDroneSpacing = auto_gf_PointToDistanceBlue_lp_lineDroneSpacing;
    fixed lp_lineAngle = auto_gf_PointToDistanceBlue_lp_lineAngle;
    fixed lp_lineChangeInAngle = auto_gf_PointToDistanceBlue_lp_lineChangeInAngle;
    bool lp_lineAnglesRandom = auto_gf_PointToDistanceBlue_lp_lineAnglesRandom;
    int lp_threadlocal = auto_gf_PointToDistanceBlue_lp_threadlocal;

    // Variable Declarations
    fixed lv_angleDifferenceBetweenDrones;
    fixed lv_facingAngle;
    fixed lv_variableDelta;
    int lv_iter;
    fixed lv_moveDistance;
    int lv_moveCount;
    int lv_iter2;
    fixed lv_distanceTemp;
    fixed lv_wallDistancing;
    fixed lv_angle;
    fixed lv_wallMovementAngle;

    // Automatic Variable Declarations
    int auto37D3EA78_ae;
    const int auto37D3EA78_ai = 1;
    int autoD1DAC9D9_ae;
    const int autoD1DAC9D9_ai = 1;
    int autoEA38931D_ae;
    const int autoEA38931D_ai = 1;

    // Variable Initialization
    lv_moveCount = 1;

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if ((PointGetX(lp_originPoint) <= PointGetY(lp_originPoint))) {
        if ((PointGetX(lp_originPoint) <= (lp_distanceDroneTravels - 5.0))) {
            lv_moveDistance = (PointGetX(lp_originPoint) - 5.0);
            lv_moveCount = (FixedToInt(lp_distanceDroneTravels) / FixedToInt(PointGetX(lp_originPoint)));
        }
        else {
            lv_moveDistance = lp_distanceDroneTravels;
        }
    }
    else {
        if ((PointGetY(lp_originPoint) <= (lp_distanceDroneTravels - 5.0))) {
            lv_moveDistance = (PointGetY(lp_originPoint) - 5.0);
            lv_moveCount = (FixedToInt(lp_distanceDroneTravels) / FixedToInt(PointGetY(lp_originPoint)));
        }
        else {
            lv_moveDistance = lp_distanceDroneTravels;
        }
    }
    lv_variableDelta = lp_changeInAngle;
    lv_facingAngle = lp_initialAngle;
    lv_angleDifferenceBetweenDrones = (360.0 / lp_numOfDronesSpawned);
    if ((lp_droneSpawnInLine == false)) {
        while ((gv_thread == lp_threadlocal)) {
            autoD1DAC9D9_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (autoD1DAC9D9_ai >= 0 && lv_iter <= autoD1DAC9D9_ae) || (autoD1DAC9D9_ai < 0 && lv_iter >= autoD1DAC9D9_ae) ) ; lv_iter += autoD1DAC9D9_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, lp_originPoint, (lv_facingAngle + (lv_angleDifferenceBetweenDrones * lv_iter)));
                autoEA38931D_ae = lv_moveCount;
                lv_iter2 = 1;
                for ( ; ( (autoEA38931D_ai >= 0 && lv_iter2 <= autoEA38931D_ae) || (autoEA38931D_ai < 0 && lv_iter2 >= autoEA38931D_ae) ) ; lv_iter2 += autoEA38931D_ai ) {
                    lv_distanceTemp += lv_moveDistance;
                    UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), lv_distanceTemp, UnitGetFacing(UnitLastCreated()))), c_orderQueueAddToEnd);
                }
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                lv_distanceTemp = 0.0;
            }
            lv_facingAngle += lv_variableDelta;
            if (((lp_arcLengthInDegrees != 0.0) && ((lv_facingAngle >= lp_arcLengthInDegrees) || (lv_facingAngle < lp_initialAngle)))) {
                lv_variableDelta *= -1.0;
            }

            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    else {
        while ((gv_thread == lp_threadlocal)) {
            lv_wallDistancing = 0.0;
            auto37D3EA78_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (auto37D3EA78_ai >= 0 && lv_iter <= auto37D3EA78_ae) || (auto37D3EA78_ai < 0 && lv_iter >= auto37D3EA78_ae) ) ; lv_iter += auto37D3EA78_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lp_originPoint, (lv_wallDistancing + lp_lineDroneOriginOffset), lv_angle), lv_wallMovementAngle);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), lp_distanceDroneTravels, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                lv_wallDistancing += lp_lineDroneSpacing;
            }
            lv_wallMovementAngle += lp_lineChangeInAngle;
            if ((lp_lineAnglesRandom == true)) {
                lv_angle = libNtve_gf_RandomAngle();
            }
            else {
                lv_angle += lp_changeInAngle;
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_RegionToPointBlue_Trigger = null;
fixed auto_gf_RegionToPointBlue_lp_droneSpawnFrequency;
fixed auto_gf_RegionToPointBlue_lp_droneSpeed;
int auto_gf_RegionToPointBlue_lp_numOfDronesSpawned;
region auto_gf_RegionToPointBlue_lp_originRegion;
point auto_gf_RegionToPointBlue_lp_destinationPoint;
fixed auto_gf_RegionToPointBlue_lp_initialDelay;
bool auto_gf_RegionToPointBlue_lp_droneSpawnInLine;
fixed auto_gf_RegionToPointBlue_lp_changeInAngle;
fixed auto_gf_RegionToPointBlue_lp_initialAngle;
fixed auto_gf_RegionToPointBlue_lp_lineDroneSpacing;
fixed auto_gf_RegionToPointBlue_lp_lineDroneOriginOffset;
bool auto_gf_RegionToPointBlue_lp_lineAnglesRandom;
int auto_gf_RegionToPointBlue_lp_threadlocal;

void gf_RegionToPointBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, int lp_numOfDronesSpawned, region lp_originRegion, point lp_destinationPoint, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAnglesRandom, int lp_threadlocal) {
    auto_gf_RegionToPointBlue_lp_droneSpawnFrequency = lp_droneSpawnFrequency;
    auto_gf_RegionToPointBlue_lp_droneSpeed = lp_droneSpeed;
    auto_gf_RegionToPointBlue_lp_numOfDronesSpawned = lp_numOfDronesSpawned;
    auto_gf_RegionToPointBlue_lp_originRegion = lp_originRegion;
    auto_gf_RegionToPointBlue_lp_destinationPoint = lp_destinationPoint;
    auto_gf_RegionToPointBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_RegionToPointBlue_lp_droneSpawnInLine = lp_droneSpawnInLine;
    auto_gf_RegionToPointBlue_lp_changeInAngle = lp_changeInAngle;
    auto_gf_RegionToPointBlue_lp_initialAngle = lp_initialAngle;
    auto_gf_RegionToPointBlue_lp_lineDroneSpacing = lp_lineDroneSpacing;
    auto_gf_RegionToPointBlue_lp_lineDroneOriginOffset = lp_lineDroneOriginOffset;
    auto_gf_RegionToPointBlue_lp_lineAnglesRandom = lp_lineAnglesRandom;
    auto_gf_RegionToPointBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_RegionToPointBlue_Trigger == null) {
        auto_gf_RegionToPointBlue_Trigger = TriggerCreate("auto_gf_RegionToPointBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_RegionToPointBlue_Trigger, false, false);
}

bool auto_gf_RegionToPointBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_droneSpawnFrequency = auto_gf_RegionToPointBlue_lp_droneSpawnFrequency;
    fixed lp_droneSpeed = auto_gf_RegionToPointBlue_lp_droneSpeed;
    int lp_numOfDronesSpawned = auto_gf_RegionToPointBlue_lp_numOfDronesSpawned;
    region lp_originRegion = auto_gf_RegionToPointBlue_lp_originRegion;
    point lp_destinationPoint = auto_gf_RegionToPointBlue_lp_destinationPoint;
    fixed lp_initialDelay = auto_gf_RegionToPointBlue_lp_initialDelay;
    bool lp_droneSpawnInLine = auto_gf_RegionToPointBlue_lp_droneSpawnInLine;
    fixed lp_changeInAngle = auto_gf_RegionToPointBlue_lp_changeInAngle;
    fixed lp_initialAngle = auto_gf_RegionToPointBlue_lp_initialAngle;
    fixed lp_lineDroneSpacing = auto_gf_RegionToPointBlue_lp_lineDroneSpacing;
    fixed lp_lineDroneOriginOffset = auto_gf_RegionToPointBlue_lp_lineDroneOriginOffset;
    bool lp_lineAnglesRandom = auto_gf_RegionToPointBlue_lp_lineAnglesRandom;
    int lp_threadlocal = auto_gf_RegionToPointBlue_lp_threadlocal;

    // Variable Declarations
    int lv_iter;
    point[2] lv_randomPoint;
    fixed lv_wallDistancing;
    fixed lv_angle;

    // Automatic Variable Declarations
    int auto3896F756_ae;
    const int auto3896F756_ai = 1;
    int auto0ACE32F9_ae;
    const int auto0ACE32F9_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if ((lp_droneSpawnInLine == false)) {
        while ((gv_thread == lp_threadlocal)) {
            auto0ACE32F9_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (auto0ACE32F9_ai >= 0 && lv_iter <= auto0ACE32F9_ae) || (auto0ACE32F9_ai < 0 && lv_iter >= auto0ACE32F9_ae) ) ; lv_iter += auto0ACE32F9_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, RegionRandomPoint(lp_originRegion), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_destinationPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lp_destinationPoint, 0.0);
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    else {
        if ((lp_lineAnglesRandom == true)) {
            lv_angle = libNtve_gf_RandomAngle();
        }
        else {
            lv_angle = lp_initialAngle;
        }
        while ((gv_thread == lp_threadlocal)) {
            lv_randomPoint[0] = RegionRandomPoint(lp_originRegion);
            lv_wallDistancing = 0.0;
            auto3896F756_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (auto3896F756_ai >= 0 && lv_iter <= auto3896F756_ae) || (auto3896F756_ai < 0 && lv_iter >= auto3896F756_ae) ) ; lv_iter += auto3896F756_ai ) {
                UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lv_randomPoint[0], (lv_wallDistancing + lp_lineDroneOriginOffset), lv_angle), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lp_destinationPoint), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lp_destinationPoint, 0.0);
                lv_wallDistancing += lp_lineDroneSpacing;
            }
            if ((lp_lineAnglesRandom == true)) {
                lv_angle = libNtve_gf_RandomAngle();
            }
            else {
                lv_angle += lp_changeInAngle;
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_RegionToRegionBlue_Trigger = null;
fixed auto_gf_RegionToRegionBlue_lp_droneSpawnFrequency;
fixed auto_gf_RegionToRegionBlue_lp_droneSpeed;
int auto_gf_RegionToRegionBlue_lp_numOfDronesSpawned;
region auto_gf_RegionToRegionBlue_lp_originRegion;
region auto_gf_RegionToRegionBlue_lp_destinationRegion;
fixed auto_gf_RegionToRegionBlue_lp_initialDelay;
bool auto_gf_RegionToRegionBlue_lp_droneSpawnInLine;
fixed auto_gf_RegionToRegionBlue_lp_changeInAngle;
fixed auto_gf_RegionToRegionBlue_lp_initialAngle;
fixed auto_gf_RegionToRegionBlue_lp_lineDroneSpacing;
fixed auto_gf_RegionToRegionBlue_lp_lineDroneOriginOffset;
bool auto_gf_RegionToRegionBlue_lp_lineAngleRandom;
int auto_gf_RegionToRegionBlue_lp_threadlocal;

void gf_RegionToRegionBlue (fixed lp_droneSpawnFrequency, fixed lp_droneSpeed, int lp_numOfDronesSpawned, region lp_originRegion, region lp_destinationRegion, fixed lp_initialDelay, bool lp_droneSpawnInLine, fixed lp_changeInAngle, fixed lp_initialAngle, fixed lp_lineDroneSpacing, fixed lp_lineDroneOriginOffset, bool lp_lineAngleRandom, int lp_threadlocal) {
    auto_gf_RegionToRegionBlue_lp_droneSpawnFrequency = lp_droneSpawnFrequency;
    auto_gf_RegionToRegionBlue_lp_droneSpeed = lp_droneSpeed;
    auto_gf_RegionToRegionBlue_lp_numOfDronesSpawned = lp_numOfDronesSpawned;
    auto_gf_RegionToRegionBlue_lp_originRegion = lp_originRegion;
    auto_gf_RegionToRegionBlue_lp_destinationRegion = lp_destinationRegion;
    auto_gf_RegionToRegionBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_RegionToRegionBlue_lp_droneSpawnInLine = lp_droneSpawnInLine;
    auto_gf_RegionToRegionBlue_lp_changeInAngle = lp_changeInAngle;
    auto_gf_RegionToRegionBlue_lp_initialAngle = lp_initialAngle;
    auto_gf_RegionToRegionBlue_lp_lineDroneSpacing = lp_lineDroneSpacing;
    auto_gf_RegionToRegionBlue_lp_lineDroneOriginOffset = lp_lineDroneOriginOffset;
    auto_gf_RegionToRegionBlue_lp_lineAngleRandom = lp_lineAngleRandom;
    auto_gf_RegionToRegionBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_RegionToRegionBlue_Trigger == null) {
        auto_gf_RegionToRegionBlue_Trigger = TriggerCreate("auto_gf_RegionToRegionBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_RegionToRegionBlue_Trigger, false, false);
}

bool auto_gf_RegionToRegionBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_droneSpawnFrequency = auto_gf_RegionToRegionBlue_lp_droneSpawnFrequency;
    fixed lp_droneSpeed = auto_gf_RegionToRegionBlue_lp_droneSpeed;
    int lp_numOfDronesSpawned = auto_gf_RegionToRegionBlue_lp_numOfDronesSpawned;
    region lp_originRegion = auto_gf_RegionToRegionBlue_lp_originRegion;
    region lp_destinationRegion = auto_gf_RegionToRegionBlue_lp_destinationRegion;
    fixed lp_initialDelay = auto_gf_RegionToRegionBlue_lp_initialDelay;
    bool lp_droneSpawnInLine = auto_gf_RegionToRegionBlue_lp_droneSpawnInLine;
    fixed lp_changeInAngle = auto_gf_RegionToRegionBlue_lp_changeInAngle;
    fixed lp_initialAngle = auto_gf_RegionToRegionBlue_lp_initialAngle;
    fixed lp_lineDroneSpacing = auto_gf_RegionToRegionBlue_lp_lineDroneSpacing;
    fixed lp_lineDroneOriginOffset = auto_gf_RegionToRegionBlue_lp_lineDroneOriginOffset;
    bool lp_lineAngleRandom = auto_gf_RegionToRegionBlue_lp_lineAngleRandom;
    int lp_threadlocal = auto_gf_RegionToRegionBlue_lp_threadlocal;

    // Variable Declarations
    int lv_iter;
    point[2] lv_randomPoint;
    fixed lv_wallDistancing;
    fixed lv_angle;

    // Automatic Variable Declarations
    int autoEC52FE50_ae;
    const int autoEC52FE50_ai = 1;
    int autoF03F9EE0_ae;
    const int autoF03F9EE0_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if ((lp_droneSpawnInLine == false)) {
        while ((gv_thread == lp_threadlocal)) {
            autoF03F9EE0_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (autoF03F9EE0_ai >= 0 && lv_iter <= autoF03F9EE0_ae) || (autoF03F9EE0_ai < 0 && lv_iter >= autoF03F9EE0_ae) ) ; lv_iter += autoF03F9EE0_ai ) {
                lv_randomPoint[0] = RegionRandomPoint(lp_destinationRegion);
                UnitCreate(1, "PointDefenseDrone", 0, 15, RegionRandomPoint(lp_originRegion), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_randomPoint[0]), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lv_randomPoint[0], 0.0);
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    else {
        if ((lp_lineAngleRandom == true)) {
            lv_angle = libNtve_gf_RandomAngle();
        }
        else {
            lv_angle = lp_initialAngle;
        }
        while ((gv_thread == lp_threadlocal)) {
            lv_randomPoint[0] = RegionRandomPoint(lp_originRegion);
            lv_wallDistancing = 0.0;
            autoEC52FE50_ae = lp_numOfDronesSpawned;
            lv_iter = 1;
            for ( ; ( (autoEC52FE50_ai >= 0 && lv_iter <= autoEC52FE50_ae) || (autoEC52FE50_ai < 0 && lv_iter >= autoEC52FE50_ae) ) ; lv_iter += autoEC52FE50_ai ) {
                lv_randomPoint[1] = RegionRandomPoint(lp_destinationRegion);
                UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lv_randomPoint[0], (lv_wallDistancing + lp_lineDroneOriginOffset), lv_angle), 0.0);
                UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), lv_randomPoint[1]), c_orderQueueReplace);
                libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
                UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
                UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
                UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_droneSpeed);
                libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lv_randomPoint[1], 0.0);
                lv_wallDistancing += lp_lineDroneSpacing;
            }
            if ((lp_lineAngleRandom == true)) {
                lv_angle = libNtve_gf_RandomAngle();
            }
            else {
                lv_angle += lp_changeInAngle;
            }
            Wait((1.0 / lp_droneSpawnFrequency), c_timeGame);
        }
    }
    return true;
}

trigger auto_gf_RegionToDistanceBlue_Trigger = null;
fixed auto_gf_RegionToDistanceBlue_lp_frequency;
fixed auto_gf_RegionToDistanceBlue_lp_speed;
fixed auto_gf_RegionToDistanceBlue_lp_distance;
int auto_gf_RegionToDistanceBlue_lp_num;
region auto_gf_RegionToDistanceBlue_lp_originRegion;
fixed auto_gf_RegionToDistanceBlue_lp_initialDelay;
int auto_gf_RegionToDistanceBlue_lp_threadlocal;

void gf_RegionToDistanceBlue (fixed lp_frequency, fixed lp_speed, fixed lp_distance, int lp_num, region lp_originRegion, fixed lp_initialDelay, int lp_threadlocal) {
    auto_gf_RegionToDistanceBlue_lp_frequency = lp_frequency;
    auto_gf_RegionToDistanceBlue_lp_speed = lp_speed;
    auto_gf_RegionToDistanceBlue_lp_distance = lp_distance;
    auto_gf_RegionToDistanceBlue_lp_num = lp_num;
    auto_gf_RegionToDistanceBlue_lp_originRegion = lp_originRegion;
    auto_gf_RegionToDistanceBlue_lp_initialDelay = lp_initialDelay;
    auto_gf_RegionToDistanceBlue_lp_threadlocal = lp_threadlocal;

    if (auto_gf_RegionToDistanceBlue_Trigger == null) {
        auto_gf_RegionToDistanceBlue_Trigger = TriggerCreate("auto_gf_RegionToDistanceBlue_TriggerFunc");
    }

    TriggerExecute(auto_gf_RegionToDistanceBlue_Trigger, false, false);
}

bool auto_gf_RegionToDistanceBlue_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_frequency = auto_gf_RegionToDistanceBlue_lp_frequency;
    fixed lp_speed = auto_gf_RegionToDistanceBlue_lp_speed;
    fixed lp_distance = auto_gf_RegionToDistanceBlue_lp_distance;
    int lp_num = auto_gf_RegionToDistanceBlue_lp_num;
    region lp_originRegion = auto_gf_RegionToDistanceBlue_lp_originRegion;
    fixed lp_initialDelay = auto_gf_RegionToDistanceBlue_lp_initialDelay;
    int lp_threadlocal = auto_gf_RegionToDistanceBlue_lp_threadlocal;

    // Variable Declarations
    int lv_iter;
    fixed lv_moveDistance;
    int lv_moveCount;
    int lv_iter2;
    fixed lv_distanceTemp;

    // Automatic Variable Declarations
    int auto079D708B_ae;
    const int auto079D708B_ai = 1;

    // Variable Initialization
    lv_moveCount = 1;

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    while ((gv_thread == lp_threadlocal)) {
        auto079D708B_ae = lp_num;
        lv_iter = 1;
        for ( ; ( (auto079D708B_ai >= 0 && lv_iter <= auto079D708B_ae) || (auto079D708B_ai < 0 && lv_iter >= auto079D708B_ae) ) ; lv_iter += auto079D708B_ai ) {
            UnitCreate(1, "PointDefenseDrone", 0, 15, RegionRandomPoint(lp_originRegion), libNtve_gf_RandomAngle());
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), lp_distance, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
            UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
            UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
        }
        Wait((1.0 / lp_frequency), c_timeGame);
    }
    return true;
}

void gf_RegionToDistanceWallBlue (fixed lp_frequency, fixed lp_delta, fixed lp_theta, fixed lp_speed, int lp_num, fixed lp_initialDelay, region lp_originRegion, fixed lp_wallDroneSpacing, int lp_threadlocal, fixed lp_initialDistance, fixed lp_distance, fixed lp_wallMovementDirection, bool lp_random) {
    // Variable Declarations
    int lv_iter;
    fixed lv_wallDistancing;
    fixed lv_angle;
    point[2] lv_randomPoint;

    // Automatic Variable Declarations
    int auto651479CE_ae;
    const int auto651479CE_ai = 1;

    // Variable Initialization

    // Implementation
    Wait(lp_initialDelay, c_timeGame);
    if ((lp_random == true)) {
        lv_angle = libNtve_gf_RandomAngle();
    }
    else {
        lv_angle = lp_theta;
    }
    while ((gv_thread == lp_threadlocal)) {
        lv_wallDistancing = 0.0;
        lv_randomPoint[0] = RegionRandomPoint(lp_originRegion);
        auto651479CE_ae = lp_num;
        lv_iter = 1;
        for ( ; ( (auto651479CE_ai >= 0 && lv_iter <= auto651479CE_ae) || (auto651479CE_ai < 0 && lv_iter >= auto651479CE_ae) ) ; lv_iter += auto651479CE_ai ) {
            UnitCreate(1, "PointDefenseDrone", 0, 15, PointWithOffsetPolar(lv_randomPoint[0], (lv_wallDistancing + lp_initialDistance), lv_angle), lp_wallMovementDirection);
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(UnitLastCreated()), lp_distance, UnitGetFacing(UnitLastCreated()))), c_orderQueueReplace);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetTintColor 102,102,255");
            UnitSetScale(UnitLastCreated(), 300.0, 300.0, 300.0);
            UnitGroupAdd(gv_dronesToBeRemovedIfIdle, UnitLastCreated());
            UnitSetPropertyFixed(UnitLastCreated(), c_unitPropMovementSpeed, lp_speed);
            lv_wallDistancing += lp_wallDroneSpacing;
        }
        if ((lp_random == true)) {
            lv_angle = libNtve_gf_RandomAngle();
        }
        else {
            lv_angle += lp_delta;
        }
        Wait((1.0 / lp_frequency), c_timeGame);
    }
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialization
//--------------------------------------------------------------------------------------------------
bool gt_Initialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    VisRevealerCreate(1, RegionEntireMap());
    CameraApplyInfo(1, CameraInfoFromId(1395169869), 0.0, -1, 10.0, true);
    libNtve_gf_HideGameUI(false, PlayerGroupAll());
    gf_SpawnGrey(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 0, 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Initialization_Init () {
    gt_Initialization = TriggerCreate("gt_Initialization_Func");
    TriggerAddEventMapInit(gt_Initialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IdleMoveAgain
//--------------------------------------------------------------------------------------------------
bool gt_IdleMoveAgain_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_dronesToMoveIfIdle, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), RegionRandomPoint(RegionFromId(44))), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_IdleMoveAgain_Init () {
    gt_IdleMoveAgain = TriggerCreate("gt_IdleMoveAgain_Func");
    TriggerAddEventUnitBecomesIdle(gt_IdleMoveAgain, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: RemoveIdleDrones
//--------------------------------------------------------------------------------------------------
bool gt_RemoveIdleDrones_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(gv_dronesToBeRemovedIfIdle, EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_RemoveIdleDrones_Init () {
    gt_RemoveIdleDrones = TriggerCreate("gt_RemoveIdleDrones_Func");
    TriggerAddEventUnitBecomesIdle(gt_RemoveIdleDrones, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Initialization_Init();
    gt_IdleMoveAgain_Init();
    gt_RemoveIdleDrones_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitCustomScript();
    InitTriggers();
}
